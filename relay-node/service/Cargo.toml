[package]
name = "zkv-service"
rust-version = "1.70"
version = "11.0.0"
authors.workspace = true
edition.workspace = true
license = "GPL-3.0"
description = "Utils to tie different ZkVerify Realy chain components together and allow instantiation of a node."

[lints]
workspace = true

[dependencies]
volta-runtime = { workspace = true, features = ["std"] }
zkv-runtime = { workspace = true, features = ["std"] }
zkv-benchmarks = { workspace = true }
native = { workspace = true, features = ["std"] }
aggregate-rpc = { workspace = true, features = ["std"] }
vk-hash = { workspace = true }

sc-authority-discovery = { workspace = true }
sc-consensus-babe = { workspace = true }
sc-consensus-grandpa = { workspace = true }
sc-block-builder = { workspace = true }
sc-chain-spec = { workspace = true }
sc-client-api = { workspace = true }
sc-client-db = { workspace = true }
sc-consensus = { workspace = true }
sc-consensus-slots = { workspace = true }
sc-executor = { workspace = true }
sc-network = { workspace = true }
sc-network-common = { workspace = true }
sc-network-sync = { workspace = true }
sc-transaction-pool = { workspace = true }
sc-transaction-pool-api = { workspace = true }
sc-sync-state-rpc = { workspace = true }
sc-keystore = { workspace = true }
sc-basic-authorship = { workspace = true }
sc-offchain = { workspace = true }
sc-sysinfo = { workspace = true }
sc-service = { workspace = true }
telemetry = { workspace = true }
sp-authority-discovery = { workspace = true }
sp-inherents = { workspace = true }
sp-keyring = { workspace = true }
sp-api = { workspace = true }
sp-block-builder = { workspace = true }
sp-blockchain = { workspace = true }
sp-core = { workspace = true }
sp-io = { workspace = true }
sp-keystore = { workspace = true }
sp-offchain = { workspace = true }
sp-runtime = { workspace = true }
sp-session = { workspace = true }
sp-storage = { workspace = true }
sp-transaction-pool = { workspace = true }
pallet-transaction-payment = { workspace = true }
sp-timestamp = { workspace = true }
sp-consensus = { workspace = true }
sp-consensus-babe = { workspace = true }
sp-consensus-grandpa = { workspace = true }
sp-state-machine = { workspace = true }
sp-weights = { workspace = true }
sp-version = { workspace = true }
pallet-babe = { workspace = true }
pallet-staking = { workspace = true }
pallet-transaction-payment-rpc-runtime-api = { workspace = true }
frame-system = { workspace = true }
frame-system-rpc-runtime-api = { workspace = true }
prometheus-endpoint = { workspace = true }
frame-support = { workspace = true }
frame-benchmarking-cli = { workspace = true }
frame-benchmarking = { workspace = true }
sp-staking = { workspace = true }
frame-metadata-hash-extension = { workspace = true, default-features = true }

# External Crates
is_executable = "1.0.1"
schnellru = "0.2.1"
thiserror = "1.0.48"
kvdb = "0.13.0"
kvdb-rocksdb = { version = "0.19.0", optional = true }
parity-db = { version = "0.4.12", optional = true }

async-trait = { workspace = true }
futures = { workspace = true }
hex-literal = { workspace = true }
gum = { workspace = true }
log = { workspace = true }
serde = { workspace = true, features = ["derive"] }
serde_json = { workspace = true, features = ["arbitrary_precision"] }
codec = { workspace = true }
parking_lot = { workspace = true }
jsonrpsee = { workspace = true, features = ["server"] }

polkadot-core-primitives = { workspace = true }
polkadot-node-core-parachains-inherent = { workspace = true }
polkadot-overseer = { workspace = true }
polkadot-parachain-primitives = { workspace = true }
polkadot-primitives = { workspace = true }
polkadot-node-primitives = { workspace = true }
polkadot-node-subsystem = { workspace = true }
polkadot-node-subsystem-util = { workspace = true }
polkadot-node-subsystem-types = { workspace = true }
polkadot-runtime-parachains = { workspace = true }
polkadot-node-network-protocol = { workspace = true }
substrate-frame-rpc-system = { workspace = true }
pallet-transaction-payment-rpc = { workspace = true }
sc-consensus-babe-rpc = { workspace = true }
sc-consensus-grandpa-rpc = { workspace = true }
substrate-state-trie-migration-rpc = { workspace = true }

# Polkadot Subsystems
polkadot-approval-distribution = { workspace = true, optional = true }
polkadot-availability-bitfield-distribution = { workspace = true, optional = true }
polkadot-availability-distribution = { workspace = true, optional = true }
polkadot-availability-recovery = { workspace = true, optional = true }
polkadot-collator-protocol = { workspace = true, optional = true }
polkadot-dispute-distribution = { workspace = true, optional = true }
polkadot-gossip-support = { workspace = true, optional = true }
polkadot-network-bridge = { workspace = true, optional = true }
polkadot-node-collation-generation = { workspace = true, optional = true }
polkadot-node-core-approval-voting = { workspace = true, optional = true }
polkadot-node-core-approval-voting-parallel = { workspace = true, optional = true }
polkadot-node-core-av-store = { workspace = true, optional = true }
polkadot-node-core-backing = { workspace = true, optional = true }
polkadot-node-core-bitfield-signing = { workspace = true, optional = true }
polkadot-node-core-candidate-validation = { workspace = true, optional = true }
polkadot-node-core-chain-api = { workspace = true, optional = true }
polkadot-node-core-chain-selection = { workspace = true, optional = true }
polkadot-node-core-dispute-coordinator = { workspace = true, optional = true }
polkadot-node-core-prospective-parachains = { workspace = true, optional = true }
polkadot-node-core-provisioner = { workspace = true, optional = true }
polkadot-node-core-pvf = { workspace = true, optional = true }
polkadot-node-core-pvf-checker = { workspace = true, optional = true }
polkadot-node-core-runtime-api = { workspace = true, optional = true }
polkadot-statement-distribution = { workspace = true, optional = true }

sc-rpc = { workspace = true }
sc-rpc-spec-v2 = { workspace = true }

pallet-ismp-rpc = { workspace = true }
pallet-ismp-runtime-api  = { workspace = true }

[dev-dependencies]
test-client = { path = "../test/client", features = ["runtime-benchmarks"] }
node-subsystem-test-helpers = { path = "../test/subsystem-helpers" }
env_logger = "0.10.2"
assert_matches = "1.5.0"
serial_test = "3.1.1"
rand = { workspace = true }
sp-application-crypto = { workspace = true }
tempfile = { workspace = true }


[features]
default = [ "db", "full-node" ]

db = [ "sc-service/rocksdb" ]

full-node = [
	"kvdb-rocksdb",
	"parity-db",
	"polkadot-approval-distribution",
	"polkadot-availability-bitfield-distribution",
	"polkadot-availability-distribution",
	"polkadot-availability-recovery",
	"polkadot-collator-protocol",
	"polkadot-dispute-distribution",
	"polkadot-gossip-support",
	"polkadot-network-bridge",
	"polkadot-node-collation-generation",
	"polkadot-node-core-approval-voting",
	"polkadot-node-core-approval-voting-parallel",
	"polkadot-node-core-av-store",
	"polkadot-node-core-backing",
	"polkadot-node-core-bitfield-signing",
	"polkadot-node-core-candidate-validation",
	"polkadot-node-core-chain-api",
	"polkadot-node-core-chain-selection",
	"polkadot-node-core-dispute-coordinator",
	"polkadot-node-core-prospective-parachains",
	"polkadot-node-core-provisioner",
	"polkadot-node-core-pvf",
	"polkadot-node-core-pvf-checker",
	"polkadot-node-core-runtime-api",
	"polkadot-statement-distribution",
]

runtime-benchmarks = [
	"frame-benchmarking-cli/runtime-benchmarks",
	"frame-benchmarking/runtime-benchmarks",
	"frame-support/runtime-benchmarks",
	"frame-system/runtime-benchmarks",
	"pallet-babe/runtime-benchmarks",
	"pallet-staking/runtime-benchmarks",
	"pallet-transaction-payment/runtime-benchmarks",
	"polkadot-parachain-primitives/runtime-benchmarks",
	"polkadot-primitives/runtime-benchmarks",
	"polkadot-runtime-parachains/runtime-benchmarks",
	"sc-client-db/runtime-benchmarks",
	"sc-service/runtime-benchmarks",
	"sp-runtime/runtime-benchmarks",
	"sp-staking/runtime-benchmarks",
	"test-client/runtime-benchmarks",
	"volta-runtime/runtime-benchmarks",
	"zkv-runtime/runtime-benchmarks",
]

try-runtime = [
	"frame-support/try-runtime",
	"frame-system/try-runtime",
	"pallet-babe/try-runtime",
	"pallet-staking/try-runtime",
	"pallet-transaction-payment/try-runtime",
	"polkadot-runtime-parachains/try-runtime",
	"sp-runtime/try-runtime",
	"volta-runtime/try-runtime",
	"zkv-runtime/try-runtime",
]

fast-runtime = [
	"volta-runtime/fast-runtime",
	"zkv-runtime/fast-runtime",
]

malus = [ "full-node" ]
runtime-metrics = [ "polkadot-runtime-parachains/runtime-metrics" ]
metadata-hash = [ 
	"volta-runtime/metadata-hash",
	"zkv-runtime/metadata-hash",
]
