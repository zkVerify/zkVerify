name: 'Build Docker Image'

description: 'Generate and save the given docker image'

inputs:
  ref:
    description: "Git ref"
    required: true
    type: string
  docker_image_name:
    description: "Docker image name"
    required: true
    type: string
  docker_image_suffix:
    description: "Docker image name suffix"
    type: string
    default: ''
  docker_hub_org:
    description: "Docker hub organization"
    type: string
    default: 'zkverify'
  type:
    description: "Type of docker image. If 'node' compile the node, otherwise just the given runtime [zkverify|volta]"
    type: string
    default: 'node'
  profile:
    description: "Build profile"
    type: string
    default: 'production'
  features:
    description: "Build features"
    type: string
    default: 'metadata-hash'
  dry_run:
    description: "Dry run execution"
    type: boolean
    default: false

outputs:
  artifact_name:
    description: 'Docker image tar artifact name'
    value: ${{ steps.create-tar-file.outputs.artifact_name }}

runs:
  using: "composite"
  steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        ref: ${{ inputs.ref }}
        fetch-depth: 0

    - name: Build docker image
      shell: bash
      run: |
        echo "Building relay chain Docker image"
        runtime_build_arg=""
        features="${{ inputs.features }}"
        if [ "${{ inputs.type }}" = "node" ]; then
          dockerfile="zkv-relay.Dockerfile"
          runtime_build_arg=""
        elif [ "${{ inputs.type }}" = "zkverify" ]; then
          dockerfile="rt-build.Dockerfile"
          runtime_build_arg='--build-arg "RUNTIME_NAME=zkverify"'
        elif [ "${{ inputs.type }}" = "volta" ]; then
          dockerfile="rt-build.Dockerfile"
          runtime_build_arg='--build-arg "RUNTIME_NAME=volta"'
          features="${features},volta"
        else 
          echo "Invalid type specified: ${{ inputs.type }}. Valid values are: [node|zkverify|volta]"
          exit 1
        fi
        ${{inputs.dry_run}} && echo "*********************** Dry run mode enabled, skipping Docker build [${dockerfile},'${runtime_build_arg}',features='${features}'] . ***********************"
        ${{inputs.dry_run}} || docker build --build-arg "PROFILE=${{ inputs.profile }}" \
          --build-arg "FEATURES=${features}" \
          ${runtime_build_arg} \
          -f "docker/dockerfiles/${dockerfile}" \
          -t ${{ inputs.docker_hub_org }}/${{ inputs.docker_image_name }}${{ inputs.docker_image_suffix }} .

        echo "DOCKER_IMAGE_NAME=${{ inputs.docker_hub_org }}/${{ inputs.docker_image_name }}${{ inputs.docker_image_suffix }}" >> "${GITHUB_ENV}"

    - name: Save the Docker image as a tarball
      id: create-tar-file
      shell: bash
      run: |
        ARTIFACT_NAME="${{ inputs.docker_image_name }}${{ inputs.docker_image_suffix }}"
        TAR_FILE="${{github.workspace}}/${ARTIFACT_NAME}.tar"

        echo "artifact_name=$ARTIFACT_NAME" >> "${GITHUB_OUTPUT}"
        echo "TAR_FILE=$TAR_FILE" >> "${GITHUB_ENV}"

        ${{inputs.dry_run}} && echo "*********************** Dry run mode enabled, skipping Docker build. ***********************"
        ${{inputs.dry_run}} && echo "DRY-RUN -> ${DOCKER_IMAGE_NAME} -- ${{ inputs.type }}" > "${TAR_FILE}"
        ${{inputs.dry_run}} || docker save "${DOCKER_IMAGE_NAME}" -o "${TAR_FILE}"

    - name: Upload Docker image artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ steps.create-tar-file.outputs.artifact_name }}
        path: ${{ env.TAR_FILE }}
        if-no-files-found: error
        retention-days: 1
        overwrite: true
