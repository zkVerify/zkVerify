
//! Autogenerated weights for `pallet_election_provider_support_benchmarking`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 31.0.0
//! DATE: 2024-07-23, STEPS: `50`, REPEAT: `30`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `3f2a763097a9`, CPU: `AMD Ryzen 7 7700 8-Core Processor`
//! WASM-EXECUTION: `Compiled`, CHAIN: `Some("dev")`, DB CACHE: `1024`

// Executed Command:
// /usr/local/bin/zkv-node
// benchmark
// pallet
// --chain
// dev
// --execution=wasm
// --wasm-execution=compiled
// --pallet
// pallet_election_provider_support_benchmarking
// --extrinsic
// *
// --steps
// 50
// --repeat
// 30
// --output
// /data/benchmark/runtime/src/weights/pallet_election_provider_support.rs
// --template
// /data/benchmark/node/zkv-deploy-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use core::marker::PhantomData;

/// Weights for `pallet_election_provider_support_benchmarking` using the zkVerify node and recommended hardware.
pub struct ZKVWeight<T>(PhantomData<T>);

impl<T: frame_system::Config> frame_election_provider_support::WeightInfo for ZKVWeight<T> {
    /// The range of component `v` is `[1000, 2000]`.
    /// The range of component `t` is `[500, 1000]`.
    /// The range of component `d` is `[5, 16]`.
    fn phragmen(v: u32, _t: u32, d: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 6_541_418_000 picoseconds.
        Weight::from_parts(6_650_834_000, 0)
            // Standard Error: 103_841
            .saturating_add(Weight::from_parts(5_707_216, 0).saturating_mul(v.into()))
            // Standard Error: 10_768_292
            .saturating_add(Weight::from_parts(1_255_929_260, 0).saturating_mul(d.into()))
    }
    /// The range of component `v` is `[1000, 2000]`.
    /// The range of component `t` is `[500, 1000]`.
    /// The range of component `d` is `[5, 16]`.
    fn phragmms(v: u32, _t: u32, d: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_721_052_000 picoseconds.
        Weight::from_parts(4_929_883_000, 0)
            // Standard Error: 81_693
            .saturating_add(Weight::from_parts(4_357_062, 0).saturating_mul(v.into()))
            // Standard Error: 8_471_492
            .saturating_add(Weight::from_parts(1_097_083_776, 0).saturating_mul(d.into()))
    }
}
