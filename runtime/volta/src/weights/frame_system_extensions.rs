// Copyright 2024, Horizen Labs, Inc.
// SPDX-License-Identifier: Apache-2.0

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// 	http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//! Autogenerated weights for `frame_system_extensions`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 46.2.0
//! DATE: 2025-06-05, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `b65975bc31fb`, CPU: `AMD Ryzen 7 7700 8-Core Processor`
//! WASM-EXECUTION: `Compiled`, CHAIN: `None`, DB CACHE: `1024`

// Executed Command:
// /usr/local/bin/zkv-relay
// benchmark
// pallet
// --runtime
// /app/zkv_runtime.compact.compressed.wasm
// --genesis-builder=runtime
// --pallet
// frame-system-extensions
// --extrinsic
// *
// --steps
// 50
// --repeat
// 20
// --heap-pages=4096
// --header
// /data/benchmark/HEADER-APACHE2
// --output
// /data/benchmark/runtime/src/weights/frame_system_extensions.rs
// --template
// /data/benchmark/relay-node/benchmarks/zkv-deploy-weight-template.hbs
// --base-path=/tmp/tmp.LQE1fxMBsI

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use core::marker::PhantomData;
use crate::parachains;
use crate::weight_aliases::*;

/// Weights for `frame_system_extensions` using the zkVerify node and recommended hardware.
pub struct ZKVWeight<T>(PhantomData<T>);

impl<T: frame_system::Config> frame_system_extensions::WeightInfo for ZKVWeight<T> {
    fn check_genesis() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `30`
        //  Estimated: `0`
        // Minimum execution time: 5_470_000 picoseconds.
        Weight::from_parts(5_761_000, 0)
    }
    fn check_mortality_mortal_transaction() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `68`
        //  Estimated: `0`
        // Minimum execution time: 8_225_000 picoseconds.
        Weight::from_parts(8_416_000, 0)
    }
    fn check_mortality_immortal_transaction() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `68`
        //  Estimated: `0`
        // Minimum execution time: 8_205_000 picoseconds.
        Weight::from_parts(8_416_000, 0)
    }
    fn check_non_zero_sender() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 441_000 picoseconds.
        Weight::from_parts(531_000, 0)
    }
    /// Storage: `System::Account` (r:1 w:1)
    /// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
    fn check_nonce() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `101`
        //  Estimated: `3593`
        // Minimum execution time: 9_007_000 picoseconds.
        Weight::from_parts(9_267_000, 3593)
            .saturating_add(T::DbWeight::get().reads(1_u64))
            .saturating_add(T::DbWeight::get().writes(1_u64))
    }
    fn check_spec_version() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 351_000 picoseconds.
        Weight::from_parts(401_000, 0)
    }
    fn check_tx_version() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 361_000 picoseconds.
        Weight::from_parts(411_000, 0)
    }
    fn check_weight() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_244_000 picoseconds.
        Weight::from_parts(2_405_000, 0)
    }
}
