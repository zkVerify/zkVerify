// Copyright 2024, Horizen Labs, Inc.
// SPDX-License-Identifier: Apache-2.0

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// 	http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//! Autogenerated weights for `pallet_token_gateway`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 46.2.0
//! DATE: 2025-06-05, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `c0670bcc433d`, CPU: `AMD Ryzen 7 7700 8-Core Processor`
//! WASM-EXECUTION: `Compiled`, CHAIN: `None`, DB CACHE: `1024`

// Executed Command:
// /usr/local/bin/zkv-relay
// benchmark
// pallet
// --runtime
// /app/zkv_runtime.compact.compressed.wasm
// --genesis-builder=runtime
// --pallet
// pallet-token-gateway
// --extrinsic
// *
// --steps
// 50
// --repeat
// 20
// --heap-pages=4096
// --header
// /data/benchmark/HEADER-APACHE2
// --output
// /data/benchmark/runtime/src/weights/pallet_token_gateway.rs
// --template
// /data/benchmark/relay-node/benchmarks/zkv-deploy-weight-template.hbs
// --base-path=/tmp/tmp.LQE1fxMBsI

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use core::marker::PhantomData;
use crate::parachains;

/// Weights for `pallet_token_gateway` using the zkVerify node and recommended hardware.
pub struct ZKVWeight<T>(PhantomData<T>);

impl<T: frame_system::Config> pallet_token_gateway::WeightInfo for ZKVWeight<T> {
    /// Storage: `Hyperbridge::HostParams` (r:1 w:0)
    /// Proof: `Hyperbridge::HostParams` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    /// Storage: `Ismp::Nonce` (r:1 w:1)
    /// Proof: `Ismp::Nonce` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    /// Storage: `TokenGateway::Precisions` (r:0 w:100)
    /// Proof: `TokenGateway::Precisions` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `TokenGateway::NativeAssets` (r:0 w:1)
    /// Proof: `TokenGateway::NativeAssets` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `TokenGateway::LocalAssets` (r:0 w:1)
    /// Proof: `TokenGateway::LocalAssets` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `TokenGateway::SupportedAssets` (r:0 w:1)
    /// Proof: `TokenGateway::SupportedAssets` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: UNKNOWN KEY `0x52657175657374436f6d6d69746d656e7473feb9a44185d1d28a640658cad2b3` (r:1 w:1)
    /// Proof: UNKNOWN KEY `0x52657175657374436f6d6d69746d656e7473feb9a44185d1d28a640658cad2b3` (r:1 w:1)
    /// The range of component `x` is `[1, 100]`.
    fn create_erc6160_asset(x: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `85`
        //  Estimated: `3550`
        // Minimum execution time: 29_946_000 picoseconds.
        Weight::from_parts(29_840_706, 3550)
            // Standard Error: 2_256
            .saturating_add(Weight::from_parts(1_888_085, 0).saturating_mul(x.into()))
            .saturating_add(T::DbWeight::get().reads(3_u64))
            .saturating_add(T::DbWeight::get().writes(5_u64))
            .saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(x.into())))
    }
    /// Storage: `TokenGateway::SupportedAssets` (r:1 w:0)
    /// Proof: `TokenGateway::SupportedAssets` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `TokenGateway::NativeAssets` (r:1 w:0)
    /// Proof: `TokenGateway::NativeAssets` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `System::Account` (r:1 w:1)
    /// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
    /// Storage: `TokenGateway::Precisions` (r:1 w:0)
    /// Proof: `TokenGateway::Precisions` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `Ismp::Nonce` (r:1 w:1)
    /// Proof: `Ismp::Nonce` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    /// Storage: UNKNOWN KEY `0x52657175657374436f6d6d69746d656e7473ff29b23fc1ac575b9a7e35f2d47d` (r:1 w:1)
    /// Proof: UNKNOWN KEY `0x52657175657374436f6d6d69746d656e7473ff29b23fc1ac575b9a7e35f2d47d` (r:1 w:1)
    fn teleport() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `514`
        //  Estimated: `3979`
        // Minimum execution time: 72_186_000 picoseconds.
        Weight::from_parts(73_548_000, 3979)
            .saturating_add(T::DbWeight::get().reads(6_u64))
            .saturating_add(T::DbWeight::get().writes(3_u64))
    }
    /// Storage: `TokenGateway::TokenGatewayAddresses` (r:0 w:1)
    /// Proof: `TokenGateway::TokenGatewayAddresses` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// The range of component `x` is `[1, 100]`.
    fn set_token_gateway_addresses(_x: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_577_000 picoseconds.
        Weight::from_parts(3_947_680, 0)
            .saturating_add(T::DbWeight::get().writes(1_u64))
    }
    /// Storage: `Hyperbridge::HostParams` (r:1 w:0)
    /// Proof: `Hyperbridge::HostParams` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    /// Storage: `Ismp::Nonce` (r:1 w:1)
    /// Proof: `Ismp::Nonce` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    /// Storage: UNKNOWN KEY `0x52657175657374436f6d6d69746d656e747342f56fe3de906c71dafb8b927997` (r:1 w:1)
    /// Proof: UNKNOWN KEY `0x52657175657374436f6d6d69746d656e747342f56fe3de906c71dafb8b927997` (r:1 w:1)
    fn update_erc6160_asset() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `264`
        //  Estimated: `3729`
        // Minimum execution time: 27_311_000 picoseconds.
        Weight::from_parts(27_733_000, 3729)
            .saturating_add(T::DbWeight::get().reads(3_u64))
            .saturating_add(T::DbWeight::get().writes(2_u64))
    }
    /// Storage: `TokenGateway::Precisions` (r:0 w:100)
    /// Proof: `TokenGateway::Precisions` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// The range of component `x` is `[1, 100]`.
    fn update_asset_precision(x: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_757_000 picoseconds.
        Weight::from_parts(1_810_137, 0)
            // Standard Error: 1_791
            .saturating_add(Weight::from_parts(1_888_958, 0).saturating_mul(x.into()))
            .saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(x.into())))
    }
}
