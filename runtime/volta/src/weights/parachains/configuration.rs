// Copyright 2024, Horizen Labs, Inc.
// SPDX-License-Identifier: Apache-2.0

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// 	http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//! Autogenerated weights for `parachains :: configuration`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 46.2.0
//! DATE: 2025-06-05, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `9749806379f6`, CPU: `AMD Ryzen 7 7700 8-Core Processor`
//! WASM-EXECUTION: `Compiled`, CHAIN: `None`, DB CACHE: `1024`

// Executed Command:
// /usr/local/bin/zkv-relay
// benchmark
// pallet
// --runtime
// /app/zkv_runtime.compact.compressed.wasm
// --genesis-builder=runtime
// --pallet
// parachains :: configuration
// --extrinsic
// *
// --steps
// 50
// --repeat
// 20
// --heap-pages=4096
// --header
// /data/benchmark/HEADER-APACHE2
// --output
// /data/benchmark/runtime/src/weights/parachains/configuration.rs
// --template
// /data/benchmark/relay-node/benchmarks/zkv-deploy-weight-template.hbs
// --base-path=/tmp/tmp.LQE1fxMBsI

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use core::marker::PhantomData;
use crate::parachains;

/// Weights for `parachains :: configuration` using the zkVerify node and recommended hardware.
pub struct ZKVWeight<T>(PhantomData<T>);

impl<T: frame_system::Config> parachains :: configuration::WeightInfo for ZKVWeight<T> {
    /// Storage: `Configuration::PendingConfigs` (r:1 w:1)
    /// Proof: `Configuration::PendingConfigs` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    /// Storage: `Configuration::BypassConsistencyCheck` (r:1 w:0)
    /// Proof: `Configuration::BypassConsistencyCheck` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    /// Storage: `ParasShared::CurrentSessionIndex` (r:1 w:0)
    /// Proof: `ParasShared::CurrentSessionIndex` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    fn set_config_with_block_number() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `185`
        //  Estimated: `1670`
        // Minimum execution time: 11_621_000 picoseconds.
        Weight::from_parts(11_952_000, 1670)
            .saturating_add(T::DbWeight::get().reads(3_u64))
            .saturating_add(T::DbWeight::get().writes(1_u64))
    }
    /// Storage: `Configuration::PendingConfigs` (r:1 w:1)
    /// Proof: `Configuration::PendingConfigs` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    /// Storage: `Configuration::BypassConsistencyCheck` (r:1 w:0)
    /// Proof: `Configuration::BypassConsistencyCheck` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    /// Storage: `ParasShared::CurrentSessionIndex` (r:1 w:0)
    /// Proof: `ParasShared::CurrentSessionIndex` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    fn set_config_with_u32() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `185`
        //  Estimated: `1670`
        // Minimum execution time: 11_652_000 picoseconds.
        Weight::from_parts(11_963_000, 1670)
            .saturating_add(T::DbWeight::get().reads(3_u64))
            .saturating_add(T::DbWeight::get().writes(1_u64))
    }
    /// Storage: `Configuration::PendingConfigs` (r:1 w:1)
    /// Proof: `Configuration::PendingConfigs` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    /// Storage: `Configuration::BypassConsistencyCheck` (r:1 w:0)
    /// Proof: `Configuration::BypassConsistencyCheck` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    /// Storage: `ParasShared::CurrentSessionIndex` (r:1 w:0)
    /// Proof: `ParasShared::CurrentSessionIndex` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    fn set_config_with_option_u32() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `185`
        //  Estimated: `1670`
        // Minimum execution time: 11_621_000 picoseconds.
        Weight::from_parts(11_952_000, 1670)
            .saturating_add(T::DbWeight::get().reads(3_u64))
            .saturating_add(T::DbWeight::get().writes(1_u64))
    }
    /// Storage: `Benchmark::Override` (r:0 w:0)
    /// Proof: `Benchmark::Override` (`max_values`: None, `max_size`: None, mode: `Measured`)
    fn set_hrmp_open_request_ttl() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_000_000_000_000 picoseconds.
        Weight::from_parts(2_000_000_000_000, 0)
    }
    /// Storage: `Configuration::PendingConfigs` (r:1 w:1)
    /// Proof: `Configuration::PendingConfigs` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    /// Storage: `Configuration::BypassConsistencyCheck` (r:1 w:0)
    /// Proof: `Configuration::BypassConsistencyCheck` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    /// Storage: `ParasShared::CurrentSessionIndex` (r:1 w:0)
    /// Proof: `ParasShared::CurrentSessionIndex` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    fn set_config_with_balance() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `185`
        //  Estimated: `1670`
        // Minimum execution time: 11_782_000 picoseconds.
        Weight::from_parts(12_103_000, 1670)
            .saturating_add(T::DbWeight::get().reads(3_u64))
            .saturating_add(T::DbWeight::get().writes(1_u64))
    }
    /// Storage: `Configuration::PendingConfigs` (r:1 w:1)
    /// Proof: `Configuration::PendingConfigs` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    /// Storage: `Configuration::BypassConsistencyCheck` (r:1 w:0)
    /// Proof: `Configuration::BypassConsistencyCheck` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    /// Storage: `ParasShared::CurrentSessionIndex` (r:1 w:0)
    /// Proof: `ParasShared::CurrentSessionIndex` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    fn set_config_with_executor_params() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `185`
        //  Estimated: `1670`
        // Minimum execution time: 13_055_000 picoseconds.
        Weight::from_parts(13_595_000, 1670)
            .saturating_add(T::DbWeight::get().reads(3_u64))
            .saturating_add(T::DbWeight::get().writes(1_u64))
    }
    /// Storage: `Configuration::PendingConfigs` (r:1 w:1)
    /// Proof: `Configuration::PendingConfigs` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    /// Storage: `Configuration::BypassConsistencyCheck` (r:1 w:0)
    /// Proof: `Configuration::BypassConsistencyCheck` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    /// Storage: `ParasShared::CurrentSessionIndex` (r:1 w:0)
    /// Proof: `ParasShared::CurrentSessionIndex` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    fn set_config_with_perbill() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `185`
        //  Estimated: `1670`
        // Minimum execution time: 11_632_000 picoseconds.
        Weight::from_parts(11_983_000, 1670)
            .saturating_add(T::DbWeight::get().reads(3_u64))
            .saturating_add(T::DbWeight::get().writes(1_u64))
    }
    /// Storage: `Configuration::PendingConfigs` (r:1 w:1)
    /// Proof: `Configuration::PendingConfigs` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    /// Storage: `Configuration::BypassConsistencyCheck` (r:1 w:0)
    /// Proof: `Configuration::BypassConsistencyCheck` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    /// Storage: `ParasShared::CurrentSessionIndex` (r:1 w:0)
    /// Proof: `ParasShared::CurrentSessionIndex` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    fn set_node_feature() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `185`
        //  Estimated: `1670`
        // Minimum execution time: 13_395_000 picoseconds.
        Weight::from_parts(13_876_000, 1670)
            .saturating_add(T::DbWeight::get().reads(3_u64))
            .saturating_add(T::DbWeight::get().writes(1_u64))
    }
    /// Storage: `Configuration::PendingConfigs` (r:1 w:1)
    /// Proof: `Configuration::PendingConfigs` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    /// Storage: `Configuration::BypassConsistencyCheck` (r:1 w:0)
    /// Proof: `Configuration::BypassConsistencyCheck` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    /// Storage: `ParasShared::CurrentSessionIndex` (r:1 w:0)
    /// Proof: `ParasShared::CurrentSessionIndex` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    fn set_config_with_scheduler_params() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `185`
        //  Estimated: `1670`
        // Minimum execution time: 11_542_000 picoseconds.
        Weight::from_parts(11_872_000, 1670)
            .saturating_add(T::DbWeight::get().reads(3_u64))
            .saturating_add(T::DbWeight::get().writes(1_u64))
    }
}
