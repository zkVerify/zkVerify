// Copyright 2024, Horizen Labs, Inc.
// SPDX-License-Identifier: Apache-2.0

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// 	http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//! Autogenerated weights for `pallet_risc0_verifier`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 42.0.0
//! DATE: 2025-02-14, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `3e4e135035a1`, CPU: `AMD Ryzen 7 7700 8-Core Processor`
//! WASM-EXECUTION: `Compiled`, CHAIN: `None`, DB CACHE: `1024`

// Executed Command:
// /usr/local/bin/zkv-node
// benchmark
// pallet
// --runtime
// /app/zkv_runtime.compact.compressed.wasm
// --genesis-builder=runtime
// --pallet
// pallet-risc0-verifier
// --extrinsic
// *
// --steps
// 50
// --repeat
// 20
// --heap-pages=4096
// --header
// /data/benchmark/HEADER-APACHE2
// --output
// /data/benchmark/runtime/src/weights/pallet_risc0_verifier.rs
// --template
// /data/benchmark/node/zkv-deploy-weight-template.hbs
// --base-path=/tmp/tmp.N39xvPnWtj

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use core::marker::PhantomData;

/// Weights for `pallet_risc0_verifier` using the zkVerify node and recommended hardware.
pub struct ZKVWeight<T>(PhantomData<T>);

impl<T: frame_system::Config> pallet_risc0_verifier::WeightInfo for ZKVWeight<T> {
    fn verify_proof_cycle_2_pow_12() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 18_876_949_000 picoseconds.
        Weight::from_parts(18_899_660_000, 0)
    }
    fn verify_proof_cycle_2_pow_13() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 18_844_677_000 picoseconds.
        Weight::from_parts(18_865_176_000, 0)
    }
    fn verify_proof_cycle_2_pow_14() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 20_035_862_000 picoseconds.
        Weight::from_parts(20_075_465_000, 0)
    }
    fn verify_proof_cycle_2_pow_15() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 20_460_879_000 picoseconds.
        Weight::from_parts(20_509_500_000, 0)
    }
    fn verify_proof_cycle_2_pow_16() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 20_036_312_000 picoseconds.
        Weight::from_parts(20_057_271_000, 0)
    }
    fn verify_proof_cycle_2_pow_17() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 20_043_697_000 picoseconds.
        Weight::from_parts(20_071_128_000, 0)
    }
    fn verify_proof_cycle_2_pow_18() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 21_258_285_000 picoseconds.
        Weight::from_parts(21_279_685_000, 0)
    }
    fn verify_proof_cycle_2_pow_19() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 23_123_553_000 picoseconds.
        Weight::from_parts(23_169_600_000, 0)
    }
    fn verify_proof_cycle_2_pow_20() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 24_185_264_000 picoseconds.
        Weight::from_parts(24_210_552_000, 0)
    }
    fn verify_proof_cycle_2_pow_21() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 44_212_590_000 picoseconds.
        Weight::from_parts(44_274_867_000, 0)
    }
    fn verify_proof_cycle_2_pow_22() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 68_363_801_000 picoseconds.
        Weight::from_parts(68_439_824_000, 0)
    }
    fn verify_proof_cycle_2_pow_23() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 117_907_802_000 picoseconds.
        Weight::from_parts(118_055_709_000, 0)
    }
    fn verify_proof_cycle_2_pow_24() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 214_571_285_000 picoseconds.
        Weight::from_parts(214_817_858_000, 0)
    }
    /// Storage: `SettlementRisc0Pallet::Vks` (r:1 w:0)
    /// Proof: `SettlementRisc0Pallet::Vks` (`max_values`: None, `max_size`: Some(72), added: 2547, mode: `MaxEncodedLen`)
    fn get_vk() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `116`
        //  Estimated: `3537`
        // Minimum execution time: 3_987_000 picoseconds.
        Weight::from_parts(4_218_000, 3537)
            .saturating_add(T::DbWeight::get().reads(1_u64))
    }
    fn validate_vk() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 151_000 picoseconds.
        Weight::from_parts(201_000, 0)
    }
    fn compute_statement_hash() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_154_000 picoseconds.
        Weight::from_parts(2_275_000, 0)
    }
    /// Storage: `SettlementRisc0Pallet::Disabled` (r:1 w:0)
    /// Proof: `SettlementRisc0Pallet::Disabled` (`max_values`: Some(1), `max_size`: Some(1), added: 496, mode: `MaxEncodedLen`)
    /// Storage: `SettlementRisc0Pallet::Tickets` (r:1 w:1)
    /// Proof: `SettlementRisc0Pallet::Tickets` (`max_values`: None, `max_size`: Some(97), added: 2572, mode: `MaxEncodedLen`)
    /// Storage: `Balances::Holds` (r:1 w:1)
    /// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(121), added: 2596, mode: `MaxEncodedLen`)
    /// Storage: `SettlementRisc0Pallet::Vks` (r:1 w:1)
    /// Proof: `SettlementRisc0Pallet::Vks` (`max_values`: None, `max_size`: Some(72), added: 2547, mode: `MaxEncodedLen`)
    fn register_vk() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `3586`
        // Minimum execution time: 42_950_000 picoseconds.
        Weight::from_parts(43_912_000, 3586)
            .saturating_add(T::DbWeight::get().reads(4_u64))
            .saturating_add(T::DbWeight::get().writes(3_u64))
    }
    /// Storage: `SettlementRisc0Pallet::Tickets` (r:1 w:1)
    /// Proof: `SettlementRisc0Pallet::Tickets` (`max_values`: None, `max_size`: Some(97), added: 2572, mode: `MaxEncodedLen`)
    /// Storage: `Balances::Holds` (r:1 w:1)
    /// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(121), added: 2596, mode: `MaxEncodedLen`)
    /// Storage: `SettlementRisc0Pallet::Vks` (r:1 w:1)
    /// Proof: `SettlementRisc0Pallet::Vks` (`max_values`: None, `max_size`: Some(72), added: 2547, mode: `MaxEncodedLen`)
    fn unregister_vk() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `258`
        //  Estimated: `3586`
        // Minimum execution time: 38_342_000 picoseconds.
        Weight::from_parts(39_384_000, 3586)
            .saturating_add(T::DbWeight::get().reads(3_u64))
            .saturating_add(T::DbWeight::get().writes(3_u64))
    }
}
