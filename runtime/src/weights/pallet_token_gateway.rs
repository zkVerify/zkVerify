// Copyright 2024, Horizen Labs, Inc.
// SPDX-License-Identifier: Apache-2.0

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// 	http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//! Autogenerated weights for `pallet_token_gateway`

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weights for `pallet_token_gateway` using the zkVerify node and recommended hardware.
pub struct ZKVWeight<T>(PhantomData<T>);

impl<T: frame_system::Config> pallet_token_gateway::WeightInfo for ZKVWeight<T> {

    fn create_erc6160_asset(x: u32, ) -> Weight {
        Weight::from_parts(22_256_047_u64, 0)
            // Standard Error: 3_063
            .saturating_add(Weight::from_parts(1_733_865_u64, 0).saturating_mul(x as u64))
            .saturating_add(T::DbWeight::get().reads(3_u64))
            .saturating_add(T::DbWeight::get().writes(6_u64))
            .saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(x as u64)))
    }

    fn teleport() -> Weight {
        Weight::from_parts(62_000_000_u64, 0)
            .saturating_add(T::DbWeight::get().reads(7_u64))
            .saturating_add(T::DbWeight::get().writes(4_u64))
    }

    fn set_token_gateway_addresses(_x: u32, ) -> Weight {
        Weight::from_parts(3_897_505_u64, 0)
            .saturating_add(T::DbWeight::get().writes(1_u64))
    }

    fn update_erc6160_asset() -> Weight {
        Weight::from_parts(21_000_000_u64, 0)
            .saturating_add(T::DbWeight::get().reads(3_u64))
            .saturating_add(T::DbWeight::get().writes(3_u64))
    }


    /// The range of component `x` is `[1, 100]`.
    fn update_asset_precision(x: u32, ) -> Weight {
        Weight::from_parts(1_255_030_u64, 0)
            // Standard Error: 2_019
            .saturating_add(Weight::from_parts(1_723_090_u64, 0).saturating_mul(x as u64))
            .saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(x as u64)))
    }
}