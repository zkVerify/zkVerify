// Copyright 2024, Horizen Labs, Inc.
// SPDX-License-Identifier: Apache-2.0

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// 	http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//! Autogenerated weights for `pallet_proxy`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 46.2.0
//! DATE: 2025-06-05, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `994085989af1`, CPU: `AMD Ryzen 7 7700 8-Core Processor`
//! WASM-EXECUTION: `Compiled`, CHAIN: `None`, DB CACHE: `1024`

// Executed Command:
// /usr/local/bin/zkv-relay
// benchmark
// pallet
// --runtime
// /app/zkv_runtime.compact.compressed.wasm
// --genesis-builder=runtime
// --pallet
// pallet-proxy
// --extrinsic
// *
// --steps
// 50
// --repeat
// 20
// --heap-pages=4096
// --header
// /data/benchmark/HEADER-APACHE2
// --output
// /data/benchmark/runtime/src/weights/pallet_proxy.rs
// --template
// /data/benchmark/relay-node/benchmarks/zkv-deploy-weight-template.hbs
// --base-path=/tmp/tmp.LQE1fxMBsI

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use core::marker::PhantomData;
use crate::parachains;

/// Weights for `pallet_proxy` using the zkVerify node and recommended hardware.
pub struct ZKVWeight<T>(PhantomData<T>);

impl<T: frame_system::Config> pallet_proxy::WeightInfo for ZKVWeight<T> {
    /// Storage: `Proxy::Proxies` (r:1 w:0)
    /// Proof: `Proxy::Proxies` (`max_values`: None, `max_size`: Some(1241), added: 3716, mode: `MaxEncodedLen`)
    /// The range of component `p` is `[1, 31]`.
    fn proxy(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `89 + p * (37 ±0)`
        //  Estimated: `4706`
        // Minimum execution time: 10_510_000 picoseconds.
        Weight::from_parts(11_044_351, 4706)
            // Standard Error: 642
            .saturating_add(Weight::from_parts(23_272, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
    }
    /// Storage: `Proxy::Proxies` (r:1 w:0)
    /// Proof: `Proxy::Proxies` (`max_values`: None, `max_size`: Some(1241), added: 3716, mode: `MaxEncodedLen`)
    /// Storage: `Proxy::Announcements` (r:1 w:1)
    /// Proof: `Proxy::Announcements` (`max_values`: None, `max_size`: Some(2233), added: 4708, mode: `MaxEncodedLen`)
    /// Storage: `System::Account` (r:1 w:1)
    /// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
    /// The range of component `a` is `[0, 31]`.
    /// The range of component `p` is `[1, 31]`.
    fn proxy_announced(a: u32, p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `379 + a * (68 ±0) + p * (37 ±0)`
        //  Estimated: `5698`
        // Minimum execution time: 30_106_000 picoseconds.
        Weight::from_parts(31_133_074, 5698)
            // Standard Error: 1_560
            .saturating_add(Weight::from_parts(174_217, 0).saturating_mul(a.into()))
            // Standard Error: 1_612
            .saturating_add(Weight::from_parts(7_639, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(3_u64))
            .saturating_add(T::DbWeight::get().writes(2_u64))
    }
    /// Storage: `Proxy::Announcements` (r:1 w:1)
    /// Proof: `Proxy::Announcements` (`max_values`: None, `max_size`: Some(2233), added: 4708, mode: `MaxEncodedLen`)
    /// Storage: `System::Account` (r:1 w:1)
    /// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
    /// The range of component `a` is `[0, 31]`.
    /// The range of component `p` is `[1, 31]`.
    fn remove_announcement(a: u32, _p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `294 + a * (68 ±0)`
        //  Estimated: `5698`
        // Minimum execution time: 20_448_000 picoseconds.
        Weight::from_parts(21_927_877, 5698)
            // Standard Error: 2_531
            .saturating_add(Weight::from_parts(166_216, 0).saturating_mul(a.into()))
            .saturating_add(T::DbWeight::get().reads(2_u64))
            .saturating_add(T::DbWeight::get().writes(2_u64))
    }
    /// Storage: `Proxy::Announcements` (r:1 w:1)
    /// Proof: `Proxy::Announcements` (`max_values`: None, `max_size`: Some(2233), added: 4708, mode: `MaxEncodedLen`)
    /// Storage: `System::Account` (r:1 w:1)
    /// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
    /// The range of component `a` is `[0, 31]`.
    /// The range of component `p` is `[1, 31]`.
    fn reject_announcement(a: u32, _p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `294 + a * (68 ±0)`
        //  Estimated: `5698`
        // Minimum execution time: 20_438_000 picoseconds.
        Weight::from_parts(21_676_109, 5698)
            // Standard Error: 1_432
            .saturating_add(Weight::from_parts(166_557, 0).saturating_mul(a.into()))
            .saturating_add(T::DbWeight::get().reads(2_u64))
            .saturating_add(T::DbWeight::get().writes(2_u64))
    }
    /// Storage: `Proxy::Proxies` (r:1 w:0)
    /// Proof: `Proxy::Proxies` (`max_values`: None, `max_size`: Some(1241), added: 3716, mode: `MaxEncodedLen`)
    /// Storage: `Proxy::Announcements` (r:1 w:1)
    /// Proof: `Proxy::Announcements` (`max_values`: None, `max_size`: Some(2233), added: 4708, mode: `MaxEncodedLen`)
    /// Storage: `System::Account` (r:1 w:1)
    /// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
    /// The range of component `a` is `[0, 31]`.
    /// The range of component `p` is `[1, 31]`.
    fn announce(a: u32, _p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `311 + a * (68 ±0) + p * (37 ±0)`
        //  Estimated: `5698`
        // Minimum execution time: 27_601_000 picoseconds.
        Weight::from_parts(29_550_137, 5698)
            // Standard Error: 3_817
            .saturating_add(Weight::from_parts(180_114, 0).saturating_mul(a.into()))
            .saturating_add(T::DbWeight::get().reads(3_u64))
            .saturating_add(T::DbWeight::get().writes(2_u64))
    }
    /// Storage: `Proxy::Proxies` (r:1 w:1)
    /// Proof: `Proxy::Proxies` (`max_values`: None, `max_size`: Some(1241), added: 3716, mode: `MaxEncodedLen`)
    /// The range of component `p` is `[1, 31]`.
    fn add_proxy(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `89 + p * (37 ±0)`
        //  Estimated: `4706`
        // Minimum execution time: 20_248_000 picoseconds.
        Weight::from_parts(20_999_858, 4706)
            // Standard Error: 729
            .saturating_add(Weight::from_parts(31_772, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
            .saturating_add(T::DbWeight::get().writes(1_u64))
    }
    /// Storage: `Proxy::Proxies` (r:1 w:1)
    /// Proof: `Proxy::Proxies` (`max_values`: None, `max_size`: Some(1241), added: 3716, mode: `MaxEncodedLen`)
    /// The range of component `p` is `[1, 31]`.
    fn remove_proxy(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `89 + p * (37 ±0)`
        //  Estimated: `4706`
        // Minimum execution time: 19_366_000 picoseconds.
        Weight::from_parts(20_364_022, 4706)
            // Standard Error: 819
            .saturating_add(Weight::from_parts(40_873, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
            .saturating_add(T::DbWeight::get().writes(1_u64))
    }
    /// Storage: `Proxy::Proxies` (r:1 w:1)
    /// Proof: `Proxy::Proxies` (`max_values`: None, `max_size`: Some(1241), added: 3716, mode: `MaxEncodedLen`)
    /// The range of component `p` is `[1, 31]`.
    fn remove_proxies(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `89 + p * (37 ±0)`
        //  Estimated: `4706`
        // Minimum execution time: 17_563_000 picoseconds.
        Weight::from_parts(18_176_734, 4706)
            // Standard Error: 965
            .saturating_add(Weight::from_parts(20_911, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
            .saturating_add(T::DbWeight::get().writes(1_u64))
    }
    /// Storage: `Proxy::Proxies` (r:1 w:1)
    /// Proof: `Proxy::Proxies` (`max_values`: None, `max_size`: Some(1241), added: 3716, mode: `MaxEncodedLen`)
    /// The range of component `p` is `[1, 31]`.
    fn create_pure(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `101`
        //  Estimated: `4706`
        // Minimum execution time: 21_360_000 picoseconds.
        Weight::from_parts(22_036_817, 4706)
            // Standard Error: 795
            .saturating_add(Weight::from_parts(10_588, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
            .saturating_add(T::DbWeight::get().writes(1_u64))
    }
    /// Storage: `Proxy::Proxies` (r:1 w:1)
    /// Proof: `Proxy::Proxies` (`max_values`: None, `max_size`: Some(1241), added: 3716, mode: `MaxEncodedLen`)
    /// The range of component `p` is `[0, 30]`.
    fn kill_pure(p: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `126 + p * (37 ±0)`
        //  Estimated: `4706`
        // Minimum execution time: 18_264_000 picoseconds.
        Weight::from_parts(18_893_495, 4706)
            // Standard Error: 715
            .saturating_add(Weight::from_parts(28_108, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
            .saturating_add(T::DbWeight::get().writes(1_u64))
    }
}
