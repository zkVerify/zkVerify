// Copyright 2024, Horizen Labs, Inc.
// SPDX-License-Identifier: Apache-2.0

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// 	http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//! Autogenerated weights for `crate::parachains::on_demand`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 46.2.0
//! DATE: 2025-05-22, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `drhorizen`, CPU: `11th Gen Intel(R) Core(TM) i7-11850H @ 2.50GHz`
//! WASM-EXECUTION: `Compiled`, CHAIN: `None`, DB CACHE: `1024`

// Executed Command:
// ./target/release/zkv-relay
// benchmark
// pallet
// --pallet
// crate::parachains::on_demand
// --extrinsic
// *
// --template
// ./relay-node/benchmarks/zkv-deploy-weight-template.hbs
// --header
// HEADER-APACHE2
// --output
// runtime/src/weights/parachains/on_demand.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use core::marker::PhantomData;

/// Weights for `crate::parachains::on_demand` using the zkVerify node and recommended hardware.
pub struct ZKVWeight<T>(PhantomData<T>);

impl<T: frame_system::Config> crate::parachains::on_demand::WeightInfo for ZKVWeight<T> {
    /// Storage: `OnDemandAssignmentProvider::QueueStatus` (r:1 w:1)
    /// Proof: `OnDemandAssignmentProvider::QueueStatus` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    /// Storage: `System::Account` (r:1 w:1)
    /// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
    /// Storage: `OnDemandAssignmentProvider::Revenue` (r:1 w:1)
    /// Proof: `OnDemandAssignmentProvider::Revenue` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    /// Storage: `OnDemandAssignmentProvider::ParaIdAffinity` (r:1 w:0)
    /// Proof: `OnDemandAssignmentProvider::ParaIdAffinity` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `OnDemandAssignmentProvider::FreeEntries` (r:1 w:1)
    /// Proof: `OnDemandAssignmentProvider::FreeEntries` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    /// The range of component `s` is `[1, 9999]`.
    fn place_order_keep_alive(s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `152 + s * (8 ±0)`
        //  Estimated: `3615 + s * (8 ±0)`
        // Minimum execution time: 42_413_000 picoseconds.
        Weight::from_parts(33_604_217, 3615)
            // Standard Error: 111
            .saturating_add(Weight::from_parts(16_054, 0).saturating_mul(s.into()))
            .saturating_add(T::DbWeight::get().reads(5_u64))
            .saturating_add(T::DbWeight::get().writes(4_u64))
            .saturating_add(Weight::from_parts(0, 8).saturating_mul(s.into()))
    }
    /// Storage: `OnDemandAssignmentProvider::QueueStatus` (r:1 w:1)
    /// Proof: `OnDemandAssignmentProvider::QueueStatus` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    /// Storage: `System::Account` (r:1 w:1)
    /// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
    /// Storage: `OnDemandAssignmentProvider::Revenue` (r:1 w:1)
    /// Proof: `OnDemandAssignmentProvider::Revenue` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    /// Storage: `OnDemandAssignmentProvider::ParaIdAffinity` (r:1 w:0)
    /// Proof: `OnDemandAssignmentProvider::ParaIdAffinity` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `OnDemandAssignmentProvider::FreeEntries` (r:1 w:1)
    /// Proof: `OnDemandAssignmentProvider::FreeEntries` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    /// The range of component `s` is `[1, 9999]`.
    fn place_order_allow_death(s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `152 + s * (8 ±0)`
        //  Estimated: `3615 + s * (8 ±0)`
        // Minimum execution time: 42_755_000 picoseconds.
        Weight::from_parts(39_375_402, 3615)
            // Standard Error: 128
            .saturating_add(Weight::from_parts(15_288, 0).saturating_mul(s.into()))
            .saturating_add(T::DbWeight::get().reads(5_u64))
            .saturating_add(T::DbWeight::get().writes(4_u64))
            .saturating_add(Weight::from_parts(0, 8).saturating_mul(s.into()))
    }
}
