// Copyright 2024, Horizen Labs, Inc.
// SPDX-License-Identifier: Apache-2.0

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// 	http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//! Autogenerated weights for `crate::parachains::paras`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 43.0.0
//! DATE: 2025-02-28, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `24e853a4fa2b`, CPU: `AMD Ryzen 7 7700 8-Core Processor`
//! WASM-EXECUTION: `Compiled`, CHAIN: `Some("dev")`, DB CACHE: `1024`

// Executed Command:
// /usr/local/bin/zkv-relay
// benchmark
// pallet
// --chain
// dev
// --pallet
// crate::parachains::paras
// --extrinsic
// *
// --steps
// 50
// --repeat
// 20
// --heap-pages=4096
// --header
// /data/benchmark/HEADER-APACHE2
// --output
// /data/benchmark/runtime/src/weights/parachains/paras.rs
// --template
// /data/benchmark/relay-node/benchmarks/zkv-deploy-weight-template.hbs
// --base-path=/tmp/tmp.1rbLszjw13

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use core::marker::PhantomData;

/// Weights for `crate::parachains::paras` using the zkVerify node and recommended hardware.
pub struct ZKVWeight<T>(PhantomData<T>);

impl<T: frame_system::Config> crate::parachains::paras::WeightInfo for ZKVWeight<T> {
    /// Storage: `Paras::CodeByHashRefs` (r:1 w:1)
    /// Proof: `Paras::CodeByHashRefs` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `Paras::CurrentCodeHash` (r:1 w:1)
    /// Proof: `Paras::CurrentCodeHash` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `System::Digest` (r:1 w:1)
    /// Proof: `System::Digest` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    /// Storage: `Paras::PastCodeMeta` (r:1 w:1)
    /// Proof: `Paras::PastCodeMeta` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `Paras::PastCodePruning` (r:1 w:1)
    /// Proof: `Paras::PastCodePruning` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    /// Storage: `Paras::PastCodeHash` (r:0 w:1)
    /// Proof: `Paras::PastCodeHash` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `Paras::CodeByHash` (r:0 w:1)
    /// Proof: `Paras::CodeByHash` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// The range of component `c` is `[9, 3145728]`.
    fn force_set_current_code(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `8309`
        //  Estimated: `11774`
        // Minimum execution time: 29_616_000 picoseconds.
        Weight::from_parts(29_886_000, 11774)
            // Standard Error: 87
            .saturating_add(Weight::from_parts(9_707, 0).saturating_mul(c.into()))
            .saturating_add(T::DbWeight::get().reads(5_u64))
            .saturating_add(T::DbWeight::get().writes(7_u64))
    }
    /// Storage: `Paras::Heads` (r:0 w:1)
    /// Proof: `Paras::Heads` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// The range of component `s` is `[9, 1048576]`.
    fn force_set_current_head(s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_069_000 picoseconds.
        Weight::from_parts(5_160_000, 0)
            // Standard Error: 28
            .saturating_add(Weight::from_parts(3_352, 0).saturating_mul(s.into()))
            .saturating_add(T::DbWeight::get().writes(1_u64))
    }
    /// Storage: `Paras::MostRecentContext` (r:0 w:1)
    /// Proof: `Paras::MostRecentContext` (`max_values`: None, `max_size`: None, mode: `Measured`)
    fn force_set_most_recent_context() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_565_000 picoseconds.
        Weight::from_parts(2_705_000, 0)
            .saturating_add(T::DbWeight::get().writes(1_u64))
    }
    /// Storage: `Paras::FutureCodeHash` (r:1 w:1)
    /// Proof: `Paras::FutureCodeHash` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `Paras::CurrentCodeHash` (r:1 w:0)
    /// Proof: `Paras::CurrentCodeHash` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `Paras::UpgradeCooldowns` (r:1 w:1)
    /// Proof: `Paras::UpgradeCooldowns` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    /// Storage: `Paras::PvfActiveVoteMap` (r:1 w:1)
    /// Proof: `Paras::PvfActiveVoteMap` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `Paras::CodeByHash` (r:1 w:1)
    /// Proof: `Paras::CodeByHash` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `ParasShared::ActiveValidatorKeys` (r:1 w:0)
    /// Proof: `ParasShared::ActiveValidatorKeys` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    /// Storage: `Paras::PvfActiveVoteList` (r:1 w:1)
    /// Proof: `Paras::PvfActiveVoteList` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    /// Storage: `Paras::CodeByHashRefs` (r:1 w:1)
    /// Proof: `Paras::CodeByHashRefs` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `Paras::UpgradeRestrictionSignal` (r:0 w:1)
    /// Proof: `Paras::UpgradeRestrictionSignal` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// The range of component `c` is `[9, 3145728]`.
    fn force_schedule_code_upgrade(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `8486`
        //  Estimated: `11951`
        // Minimum execution time: 40_376_000 picoseconds.
        Weight::from_parts(41_618_000, 11951)
            // Standard Error: 89
            .saturating_add(Weight::from_parts(9_767, 0).saturating_mul(c.into()))
            .saturating_add(T::DbWeight::get().reads(8_u64))
            .saturating_add(T::DbWeight::get().writes(7_u64))
    }
    /// Storage: `Paras::FutureCodeUpgrades` (r:1 w:0)
    /// Proof: `Paras::FutureCodeUpgrades` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `Paras::Heads` (r:0 w:1)
    /// Proof: `Paras::Heads` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `Paras::UpgradeGoAheadSignal` (r:0 w:1)
    /// Proof: `Paras::UpgradeGoAheadSignal` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `Paras::MostRecentContext` (r:0 w:1)
    /// Proof: `Paras::MostRecentContext` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// The range of component `s` is `[9, 1048576]`.
    fn force_note_new_head(s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `268`
        //  Estimated: `3733`
        // Minimum execution time: 12_313_000 picoseconds.
        Weight::from_parts(12_654_000, 3733)
            // Standard Error: 28
            .saturating_add(Weight::from_parts(3_356, 0).saturating_mul(s.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
            .saturating_add(T::DbWeight::get().writes(3_u64))
    }
    /// Storage: `ParasShared::CurrentSessionIndex` (r:1 w:0)
    /// Proof: `ParasShared::CurrentSessionIndex` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    /// Storage: `Paras::ActionsQueue` (r:1 w:1)
    /// Proof: `Paras::ActionsQueue` (`max_values`: None, `max_size`: None, mode: `Measured`)
    fn force_queue_action() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `4346`
        //  Estimated: `7811`
        // Minimum execution time: 18_195_000 picoseconds.
        Weight::from_parts(18_836_000, 7811)
            .saturating_add(T::DbWeight::get().reads(2_u64))
            .saturating_add(T::DbWeight::get().writes(1_u64))
    }
    /// Storage: `Paras::PvfActiveVoteMap` (r:1 w:1)
    /// Proof: `Paras::PvfActiveVoteMap` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `Paras::PvfActiveVoteList` (r:1 w:1)
    /// Proof: `Paras::PvfActiveVoteList` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    /// Storage: `ParasShared::CurrentSessionIndex` (r:1 w:0)
    /// Proof: `ParasShared::CurrentSessionIndex` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    /// Storage: `Paras::ActionsQueue` (r:1 w:1)
    /// Proof: `Paras::ActionsQueue` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// The range of component `c` is `[9, 3145728]`.
    fn add_trusted_validation_code(c: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `717`
        //  Estimated: `4182`
        // Minimum execution time: 64_040_000 picoseconds.
        Weight::from_parts(64_622_000, 4182)
            // Standard Error: 87
            .saturating_add(Weight::from_parts(9_094, 0).saturating_mul(c.into()))
            .saturating_add(T::DbWeight::get().reads(4_u64))
            .saturating_add(T::DbWeight::get().writes(3_u64))
    }
    /// Storage: `Paras::CodeByHashRefs` (r:1 w:0)
    /// Proof: `Paras::CodeByHashRefs` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `Paras::CodeByHash` (r:0 w:1)
    /// Proof: `Paras::CodeByHash` (`max_values`: None, `max_size`: None, mode: `Measured`)
    fn poke_unused_validation_code() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `28`
        //  Estimated: `3493`
        // Minimum execution time: 6_693_000 picoseconds.
        Weight::from_parts(6_863_000, 3493)
            .saturating_add(T::DbWeight::get().reads(1_u64))
            .saturating_add(T::DbWeight::get().writes(1_u64))
    }
    /// Storage: `ParasShared::ActiveValidatorKeys` (r:1 w:0)
    /// Proof: `ParasShared::ActiveValidatorKeys` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    /// Storage: `ParasShared::CurrentSessionIndex` (r:1 w:0)
    /// Proof: `ParasShared::CurrentSessionIndex` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    /// Storage: `Paras::PvfActiveVoteMap` (r:1 w:1)
    /// Proof: `Paras::PvfActiveVoteMap` (`max_values`: None, `max_size`: None, mode: `Measured`)
    fn include_pvf_check_statement() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `26740`
        //  Estimated: `30205`
        // Minimum execution time: 90_750_000 picoseconds.
        Weight::from_parts(92_033_000, 30205)
            .saturating_add(T::DbWeight::get().reads(3_u64))
            .saturating_add(T::DbWeight::get().writes(1_u64))
    }
    /// Storage: `ParasShared::ActiveValidatorKeys` (r:1 w:0)
    /// Proof: `ParasShared::ActiveValidatorKeys` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    /// Storage: `ParasShared::CurrentSessionIndex` (r:1 w:0)
    /// Proof: `ParasShared::CurrentSessionIndex` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    /// Storage: `Paras::PvfActiveVoteMap` (r:1 w:1)
    /// Proof: `Paras::PvfActiveVoteMap` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `Paras::PvfActiveVoteList` (r:1 w:1)
    /// Proof: `Paras::PvfActiveVoteList` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    /// Storage: `Paras::UpcomingUpgrades` (r:1 w:1)
    /// Proof: `Paras::UpcomingUpgrades` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    /// Storage: `System::Digest` (r:1 w:1)
    /// Proof: `System::Digest` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    /// Storage: `Paras::FutureCodeUpgrades` (r:0 w:100)
    /// Proof: `Paras::FutureCodeUpgrades` (`max_values`: None, `max_size`: None, mode: `Measured`)
    fn include_pvf_check_statement_finalize_upgrade_accept() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `27394`
        //  Estimated: `30859`
        // Minimum execution time: 606_177_000 picoseconds.
        Weight::from_parts(611_879_000, 30859)
            .saturating_add(T::DbWeight::get().reads(6_u64))
            .saturating_add(T::DbWeight::get().writes(104_u64))
    }
    /// Storage: `ParasShared::ActiveValidatorKeys` (r:1 w:0)
    /// Proof: `ParasShared::ActiveValidatorKeys` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    /// Storage: `ParasShared::CurrentSessionIndex` (r:1 w:0)
    /// Proof: `ParasShared::CurrentSessionIndex` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    /// Storage: `Paras::PvfActiveVoteMap` (r:1 w:1)
    /// Proof: `Paras::PvfActiveVoteMap` (`max_values`: None, `max_size`: None, mode: `Measured`)
    fn include_pvf_check_statement_finalize_upgrade_reject() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `27372`
        //  Estimated: `30837`
        // Minimum execution time: 90_871_000 picoseconds.
        Weight::from_parts(92_113_000, 30837)
            .saturating_add(T::DbWeight::get().reads(3_u64))
            .saturating_add(T::DbWeight::get().writes(1_u64))
    }
    /// Storage: `ParasShared::ActiveValidatorKeys` (r:1 w:0)
    /// Proof: `ParasShared::ActiveValidatorKeys` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    /// Storage: `ParasShared::CurrentSessionIndex` (r:1 w:0)
    /// Proof: `ParasShared::CurrentSessionIndex` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    /// Storage: `Paras::PvfActiveVoteMap` (r:1 w:1)
    /// Proof: `Paras::PvfActiveVoteMap` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `Paras::PvfActiveVoteList` (r:1 w:1)
    /// Proof: `Paras::PvfActiveVoteList` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    /// Storage: `Paras::ActionsQueue` (r:1 w:1)
    /// Proof: `Paras::ActionsQueue` (`max_values`: None, `max_size`: None, mode: `Measured`)
    fn include_pvf_check_statement_finalize_onboarding_accept() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `26762`
        //  Estimated: `30227`
        // Minimum execution time: 493_466_000 picoseconds.
        Weight::from_parts(503_906_000, 30227)
            .saturating_add(T::DbWeight::get().reads(5_u64))
            .saturating_add(T::DbWeight::get().writes(3_u64))
    }
    /// Storage: `ParasShared::ActiveValidatorKeys` (r:1 w:0)
    /// Proof: `ParasShared::ActiveValidatorKeys` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    /// Storage: `ParasShared::CurrentSessionIndex` (r:1 w:0)
    /// Proof: `ParasShared::CurrentSessionIndex` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    /// Storage: `Paras::PvfActiveVoteMap` (r:1 w:1)
    /// Proof: `Paras::PvfActiveVoteMap` (`max_values`: None, `max_size`: None, mode: `Measured`)
    fn include_pvf_check_statement_finalize_onboarding_reject() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `26740`
        //  Estimated: `30205`
        // Minimum execution time: 89_438_000 picoseconds.
        Weight::from_parts(90_920_000, 30205)
            .saturating_add(T::DbWeight::get().reads(3_u64))
            .saturating_add(T::DbWeight::get().writes(1_u64))
    }
}
