// Copyright 2024, Horizen Labs, Inc.
// SPDX-License-Identifier: Apache-2.0

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// 	http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//! Autogenerated weights for `frame_system_extensions`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 46.2.0
//! DATE: 2025-05-26, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `drhorizen`, CPU: `11th Gen Intel(R) Core(TM) i7-11850H @ 2.50GHz`
//! WASM-EXECUTION: `Compiled`, CHAIN: `None`, DB CACHE: `1024`

// Executed Command:
// ./target/production/zkv-relay
// benchmark
// pallet
// --pallet
// frame_system_extensions
// --extrinsic
// *
// --steps
// 50
// --repeat
// 20
// --heap-pages=4096
// --header
// HEADER-APACHE2
// --output
// runtime/src/weights/frame_system_extensions.rs
// --template
// relay-node/benchmarks/zkv-deploy-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use core::marker::PhantomData;

/// Weights for `frame_system_extensions` using the zkVerify node and recommended hardware.
pub struct ZKVWeight<T>(PhantomData<T>);

impl<T: frame_system::Config> frame_system::ExtensionsWeightInfo for ZKVWeight<T> {
    fn check_genesis() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `30`
        //  Estimated: `0`
        // Minimum execution time: 4_785_000 picoseconds.
        Weight::from_parts(4_925_000, 0)
    }
    fn check_mortality_mortal_transaction() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `68`
        //  Estimated: `0`
        // Minimum execution time: 7_071_000 picoseconds.
        Weight::from_parts(7_367_000, 0)
    }
    fn check_mortality_immortal_transaction() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `68`
        //  Estimated: `0`
        // Minimum execution time: 7_217_000 picoseconds.
        Weight::from_parts(7_480_000, 0)
    }
    fn check_non_zero_sender() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 397_000 picoseconds.
        Weight::from_parts(453_000, 0)
    }
    /// Storage: `System::Account` (r:1 w:1)
    /// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
    fn check_nonce() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `101`
        //  Estimated: `3593`
        // Minimum execution time: 7_612_000 picoseconds.
        Weight::from_parts(7_890_000, 3593)
            .saturating_add(T::DbWeight::get().reads(1_u64))
            .saturating_add(T::DbWeight::get().writes(1_u64))
    }
    fn check_spec_version() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 314_000 picoseconds.
        Weight::from_parts(373_000, 0)
    }
    fn check_tx_version() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 329_000 picoseconds.
        Weight::from_parts(365_000, 0)
    }
    fn check_weight() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_173_000 picoseconds.
        Weight::from_parts(2_264_000, 0)
    }
}
