// Copyright 2024, Horizen Labs, Inc.
// SPDX-License-Identifier: Apache-2.0

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// 	http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//! Autogenerated weights for `pallet_staking`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 46.2.0
//! DATE: 2025-06-05, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `54d6683bacc8`, CPU: `AMD Ryzen 7 7700 8-Core Processor`
//! WASM-EXECUTION: `Compiled`, CHAIN: `None`, DB CACHE: `1024`

// Executed Command:
// /usr/local/bin/zkv-relay
// benchmark
// pallet
// --runtime
// /app/zkv_runtime.compact.compressed.wasm
// --genesis-builder=runtime
// --pallet
// pallet-staking
// --extrinsic
// *
// --steps
// 50
// --repeat
// 20
// --heap-pages=4096
// --header
// /data/benchmark/HEADER-APACHE2
// --output
// /data/benchmark/runtime/src/weights/pallet_staking.rs
// --template
// /data/benchmark/relay-node/benchmarks/zkv-deploy-weight-template.hbs
// --base-path=/tmp/tmp.LQE1fxMBsI

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use core::marker::PhantomData;
use crate::parachains;

/// Weights for `pallet_staking` using the zkVerify node and recommended hardware.
pub struct ZKVWeight<T>(PhantomData<T>);

impl<T: frame_system::Config> pallet_staking::WeightInfo for ZKVWeight<T> {
    /// Storage: `Staking::Bonded` (r:1 w:1)
    /// Proof: `Staking::Bonded` (`max_values`: None, `max_size`: Some(72), added: 2547, mode: `MaxEncodedLen`)
    /// Storage: `Staking::Ledger` (r:1 w:1)
    /// Proof: `Staking::Ledger` (`max_values`: None, `max_size`: Some(874), added: 3349, mode: `MaxEncodedLen`)
    /// Storage: `Staking::VirtualStakers` (r:1 w:0)
    /// Proof: `Staking::VirtualStakers` (`max_values`: None, `max_size`: Some(40), added: 2515, mode: `MaxEncodedLen`)
    /// Storage: `Balances::Locks` (r:1 w:1)
    /// Proof: `Balances::Locks` (`max_values`: None, `max_size`: Some(1299), added: 3774, mode: `MaxEncodedLen`)
    /// Storage: `Balances::Freezes` (r:1 w:0)
    /// Proof: `Balances::Freezes` (`max_values`: None, `max_size`: Some(185), added: 2660, mode: `MaxEncodedLen`)
    /// Storage: `Staking::Payee` (r:0 w:1)
    /// Proof: `Staking::Payee` (`max_values`: None, `max_size`: Some(73), added: 2548, mode: `MaxEncodedLen`)
    fn bond() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `996`
        //  Estimated: `4764`
        // Minimum execution time: 50_965_000 picoseconds.
        Weight::from_parts(51_897_000, 4764)
            .saturating_add(T::DbWeight::get().reads(5_u64))
            .saturating_add(T::DbWeight::get().writes(4_u64))
    }
    /// Storage: `Staking::Bonded` (r:1 w:0)
    /// Proof: `Staking::Bonded` (`max_values`: None, `max_size`: Some(72), added: 2547, mode: `MaxEncodedLen`)
    /// Storage: `Staking::Ledger` (r:1 w:1)
    /// Proof: `Staking::Ledger` (`max_values`: None, `max_size`: Some(874), added: 3349, mode: `MaxEncodedLen`)
    /// Storage: `Staking::VirtualStakers` (r:1 w:0)
    /// Proof: `Staking::VirtualStakers` (`max_values`: None, `max_size`: Some(40), added: 2515, mode: `MaxEncodedLen`)
    /// Storage: `Balances::Locks` (r:1 w:1)
    /// Proof: `Balances::Locks` (`max_values`: None, `max_size`: Some(1299), added: 3774, mode: `MaxEncodedLen`)
    /// Storage: `Balances::Freezes` (r:1 w:0)
    /// Proof: `Balances::Freezes` (`max_values`: None, `max_size`: Some(185), added: 2660, mode: `MaxEncodedLen`)
    /// Storage: `VoterList::ListNodes` (r:3 w:3)
    /// Proof: `VoterList::ListNodes` (`max_values`: None, `max_size`: Some(154), added: 2629, mode: `MaxEncodedLen`)
    /// Storage: `VoterList::ListBags` (r:2 w:2)
    /// Proof: `VoterList::ListBags` (`max_values`: None, `max_size`: Some(82), added: 2557, mode: `MaxEncodedLen`)
    fn bond_extra() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1911`
        //  Estimated: `8877`
        // Minimum execution time: 97_591_000 picoseconds.
        Weight::from_parts(99_175_000, 8877)
            .saturating_add(T::DbWeight::get().reads(10_u64))
            .saturating_add(T::DbWeight::get().writes(7_u64))
    }
    /// Storage: `Staking::Ledger` (r:1 w:1)
    /// Proof: `Staking::Ledger` (`max_values`: None, `max_size`: Some(874), added: 3349, mode: `MaxEncodedLen`)
    /// Storage: `Staking::Bonded` (r:1 w:0)
    /// Proof: `Staking::Bonded` (`max_values`: None, `max_size`: Some(72), added: 2547, mode: `MaxEncodedLen`)
    /// Storage: `Staking::Nominators` (r:1 w:0)
    /// Proof: `Staking::Nominators` (`max_values`: None, `max_size`: Some(366), added: 2841, mode: `MaxEncodedLen`)
    /// Storage: `Staking::MinNominatorBond` (r:1 w:0)
    /// Proof: `Staking::MinNominatorBond` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
    /// Storage: `Staking::CurrentEra` (r:1 w:0)
    /// Proof: `Staking::CurrentEra` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
    /// Storage: `Staking::VirtualStakers` (r:1 w:0)
    /// Proof: `Staking::VirtualStakers` (`max_values`: None, `max_size`: Some(40), added: 2515, mode: `MaxEncodedLen`)
    /// Storage: `Balances::Locks` (r:1 w:1)
    /// Proof: `Balances::Locks` (`max_values`: None, `max_size`: Some(1299), added: 3774, mode: `MaxEncodedLen`)
    /// Storage: `Balances::Freezes` (r:1 w:0)
    /// Proof: `Balances::Freezes` (`max_values`: None, `max_size`: Some(185), added: 2660, mode: `MaxEncodedLen`)
    /// Storage: `VoterList::ListNodes` (r:3 w:3)
    /// Proof: `VoterList::ListNodes` (`max_values`: None, `max_size`: Some(154), added: 2629, mode: `MaxEncodedLen`)
    /// Storage: `VoterList::ListBags` (r:2 w:2)
    /// Proof: `VoterList::ListBags` (`max_values`: None, `max_size`: Some(82), added: 2557, mode: `MaxEncodedLen`)
    fn unbond() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `2116`
        //  Estimated: `8877`
        // Minimum execution time: 111_518_000 picoseconds.
        Weight::from_parts(113_001_000, 8877)
            .saturating_add(T::DbWeight::get().reads(13_u64))
            .saturating_add(T::DbWeight::get().writes(7_u64))
    }
    /// Storage: `Staking::Ledger` (r:1 w:1)
    /// Proof: `Staking::Ledger` (`max_values`: None, `max_size`: Some(874), added: 3349, mode: `MaxEncodedLen`)
    /// Storage: `Staking::Bonded` (r:1 w:0)
    /// Proof: `Staking::Bonded` (`max_values`: None, `max_size`: Some(72), added: 2547, mode: `MaxEncodedLen`)
    /// Storage: `Staking::CurrentEra` (r:1 w:0)
    /// Proof: `Staking::CurrentEra` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
    /// Storage: `Staking::VirtualStakers` (r:1 w:0)
    /// Proof: `Staking::VirtualStakers` (`max_values`: None, `max_size`: Some(40), added: 2515, mode: `MaxEncodedLen`)
    /// Storage: `Balances::Locks` (r:1 w:1)
    /// Proof: `Balances::Locks` (`max_values`: None, `max_size`: Some(1299), added: 3774, mode: `MaxEncodedLen`)
    /// Storage: `Balances::Freezes` (r:1 w:0)
    /// Proof: `Balances::Freezes` (`max_values`: None, `max_size`: Some(185), added: 2660, mode: `MaxEncodedLen`)
    /// The range of component `s` is `[0, 100]`.
    fn withdraw_unbonded_update(s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1065`
        //  Estimated: `4764`
        // Minimum execution time: 49_862_000 picoseconds.
        Weight::from_parts(51_131_027, 4764)
            // Standard Error: 511
            .saturating_add(Weight::from_parts(30_303, 0).saturating_mul(s.into()))
            .saturating_add(T::DbWeight::get().reads(6_u64))
            .saturating_add(T::DbWeight::get().writes(2_u64))
    }
    /// Storage: `Staking::Ledger` (r:1 w:1)
    /// Proof: `Staking::Ledger` (`max_values`: None, `max_size`: Some(874), added: 3349, mode: `MaxEncodedLen`)
    /// Storage: `Staking::Bonded` (r:1 w:1)
    /// Proof: `Staking::Bonded` (`max_values`: None, `max_size`: Some(72), added: 2547, mode: `MaxEncodedLen`)
    /// Storage: `Staking::CurrentEra` (r:1 w:0)
    /// Proof: `Staking::CurrentEra` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
    /// Storage: `Staking::SlashingSpans` (r:1 w:1)
    /// Proof: `Staking::SlashingSpans` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `Staking::VirtualStakers` (r:1 w:1)
    /// Proof: `Staking::VirtualStakers` (`max_values`: None, `max_size`: Some(40), added: 2515, mode: `MaxEncodedLen`)
    /// Storage: `Balances::Locks` (r:1 w:1)
    /// Proof: `Balances::Locks` (`max_values`: None, `max_size`: Some(1299), added: 3774, mode: `MaxEncodedLen`)
    /// Storage: `Balances::Freezes` (r:1 w:0)
    /// Proof: `Balances::Freezes` (`max_values`: None, `max_size`: Some(185), added: 2660, mode: `MaxEncodedLen`)
    /// Storage: `Staking::Validators` (r:1 w:0)
    /// Proof: `Staking::Validators` (`max_values`: None, `max_size`: Some(45), added: 2520, mode: `MaxEncodedLen`)
    /// Storage: `Staking::Nominators` (r:1 w:1)
    /// Proof: `Staking::Nominators` (`max_values`: None, `max_size`: Some(366), added: 2841, mode: `MaxEncodedLen`)
    /// Storage: `Staking::CounterForNominators` (r:1 w:1)
    /// Proof: `Staking::CounterForNominators` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
    /// Storage: `VoterList::ListNodes` (r:2 w:2)
    /// Proof: `VoterList::ListNodes` (`max_values`: None, `max_size`: Some(154), added: 2629, mode: `MaxEncodedLen`)
    /// Storage: `VoterList::ListBags` (r:1 w:1)
    /// Proof: `VoterList::ListBags` (`max_values`: None, `max_size`: Some(82), added: 2557, mode: `MaxEncodedLen`)
    /// Storage: `VoterList::CounterForListNodes` (r:1 w:1)
    /// Proof: `VoterList::CounterForListNodes` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
    /// Storage: `Staking::Payee` (r:0 w:1)
    /// Proof: `Staking::Payee` (`max_values`: None, `max_size`: Some(73), added: 2548, mode: `MaxEncodedLen`)
    /// Storage: `Staking::SpanSlash` (r:0 w:100)
    /// Proof: `Staking::SpanSlash` (`max_values`: None, `max_size`: Some(76), added: 2551, mode: `MaxEncodedLen`)
    /// The range of component `s` is `[0, 100]`.
    fn withdraw_unbonded_kill(s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `2117 + s * (4 ±0)`
        //  Estimated: `6248 + s * (4 ±0)`
        // Minimum execution time: 103_343_000 picoseconds.
        Weight::from_parts(108_277_941, 6248)
            // Standard Error: 2_713
            .saturating_add(Weight::from_parts(1_327_155, 0).saturating_mul(s.into()))
            .saturating_add(T::DbWeight::get().reads(14_u64))
            .saturating_add(T::DbWeight::get().writes(12_u64))
            .saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(s.into())))
            .saturating_add(Weight::from_parts(0, 4).saturating_mul(s.into()))
    }
    /// Storage: `Staking::Ledger` (r:1 w:0)
    /// Proof: `Staking::Ledger` (`max_values`: None, `max_size`: Some(874), added: 3349, mode: `MaxEncodedLen`)
    /// Storage: `Staking::Bonded` (r:1 w:0)
    /// Proof: `Staking::Bonded` (`max_values`: None, `max_size`: Some(72), added: 2547, mode: `MaxEncodedLen`)
    /// Storage: `Staking::MinValidatorBond` (r:1 w:0)
    /// Proof: `Staking::MinValidatorBond` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
    /// Storage: `Staking::MinCommission` (r:1 w:0)
    /// Proof: `Staking::MinCommission` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
    /// Storage: `Staking::Validators` (r:1 w:1)
    /// Proof: `Staking::Validators` (`max_values`: None, `max_size`: Some(45), added: 2520, mode: `MaxEncodedLen`)
    /// Storage: `Staking::MaxValidatorsCount` (r:1 w:0)
    /// Proof: `Staking::MaxValidatorsCount` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
    /// Storage: `Staking::Nominators` (r:1 w:0)
    /// Proof: `Staking::Nominators` (`max_values`: None, `max_size`: Some(366), added: 2841, mode: `MaxEncodedLen`)
    /// Storage: `VoterList::ListNodes` (r:1 w:1)
    /// Proof: `VoterList::ListNodes` (`max_values`: None, `max_size`: Some(154), added: 2629, mode: `MaxEncodedLen`)
    /// Storage: `VoterList::ListBags` (r:1 w:1)
    /// Proof: `VoterList::ListBags` (`max_values`: None, `max_size`: Some(82), added: 2557, mode: `MaxEncodedLen`)
    /// Storage: `VoterList::CounterForListNodes` (r:1 w:1)
    /// Proof: `VoterList::CounterForListNodes` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
    /// Storage: `Staking::CounterForValidators` (r:1 w:1)
    /// Proof: `Staking::CounterForValidators` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
    fn validate() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1338`
        //  Estimated: `4339`
        // Minimum execution time: 59_380_000 picoseconds.
        Weight::from_parts(60_102_000, 4339)
            .saturating_add(T::DbWeight::get().reads(11_u64))
            .saturating_add(T::DbWeight::get().writes(5_u64))
    }
    /// Storage: `Staking::Ledger` (r:1 w:0)
    /// Proof: `Staking::Ledger` (`max_values`: None, `max_size`: Some(874), added: 3349, mode: `MaxEncodedLen`)
    /// Storage: `Staking::Bonded` (r:1 w:0)
    /// Proof: `Staking::Bonded` (`max_values`: None, `max_size`: Some(72), added: 2547, mode: `MaxEncodedLen`)
    /// Storage: `Staking::Nominators` (r:128 w:128)
    /// Proof: `Staking::Nominators` (`max_values`: None, `max_size`: Some(366), added: 2841, mode: `MaxEncodedLen`)
    /// The range of component `k` is `[1, 128]`.
    fn kick(k: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1887 + k * (379 ±0)`
        //  Estimated: `4339 + k * (2841 ±0)`
        // Minimum execution time: 31_579_000 picoseconds.
        Weight::from_parts(34_286_314, 4339)
            // Standard Error: 6_395
            .saturating_add(Weight::from_parts(6_417_988, 0).saturating_mul(k.into()))
            .saturating_add(T::DbWeight::get().reads(2_u64))
            .saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(k.into())))
            .saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(k.into())))
            .saturating_add(Weight::from_parts(0, 2841).saturating_mul(k.into()))
    }
    /// Storage: `Staking::Ledger` (r:1 w:0)
    /// Proof: `Staking::Ledger` (`max_values`: None, `max_size`: Some(874), added: 3349, mode: `MaxEncodedLen`)
    /// Storage: `Staking::Bonded` (r:1 w:0)
    /// Proof: `Staking::Bonded` (`max_values`: None, `max_size`: Some(72), added: 2547, mode: `MaxEncodedLen`)
    /// Storage: `Staking::MinNominatorBond` (r:1 w:0)
    /// Proof: `Staking::MinNominatorBond` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
    /// Storage: `Staking::Nominators` (r:1 w:1)
    /// Proof: `Staking::Nominators` (`max_values`: None, `max_size`: Some(366), added: 2841, mode: `MaxEncodedLen`)
    /// Storage: `Staking::MaxNominatorsCount` (r:1 w:0)
    /// Proof: `Staking::MaxNominatorsCount` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
    /// Storage: `Staking::Validators` (r:11 w:0)
    /// Proof: `Staking::Validators` (`max_values`: None, `max_size`: Some(45), added: 2520, mode: `MaxEncodedLen`)
    /// Storage: `Staking::CurrentEra` (r:1 w:0)
    /// Proof: `Staking::CurrentEra` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
    /// Storage: `VoterList::ListNodes` (r:2 w:2)
    /// Proof: `VoterList::ListNodes` (`max_values`: None, `max_size`: Some(154), added: 2629, mode: `MaxEncodedLen`)
    /// Storage: `VoterList::ListBags` (r:1 w:1)
    /// Proof: `VoterList::ListBags` (`max_values`: None, `max_size`: Some(82), added: 2557, mode: `MaxEncodedLen`)
    /// Storage: `VoterList::CounterForListNodes` (r:1 w:1)
    /// Proof: `VoterList::CounterForListNodes` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
    /// Storage: `Staking::CounterForNominators` (r:1 w:1)
    /// Proof: `Staking::CounterForNominators` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
    /// The range of component `n` is `[1, 10]`.
    fn nominate(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1876 + n * (96 ±0)`
        //  Estimated: `6248 + n * (2520 ±0)`
        // Minimum execution time: 73_998_000 picoseconds.
        Weight::from_parts(71_134_676, 6248)
            // Standard Error: 23_166
            .saturating_add(Weight::from_parts(4_649_786, 0).saturating_mul(n.into()))
            .saturating_add(T::DbWeight::get().reads(12_u64))
            .saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(n.into())))
            .saturating_add(T::DbWeight::get().writes(6_u64))
            .saturating_add(Weight::from_parts(0, 2520).saturating_mul(n.into()))
    }
    /// Storage: `Staking::Ledger` (r:1 w:0)
    /// Proof: `Staking::Ledger` (`max_values`: None, `max_size`: Some(874), added: 3349, mode: `MaxEncodedLen`)
    /// Storage: `Staking::Bonded` (r:1 w:0)
    /// Proof: `Staking::Bonded` (`max_values`: None, `max_size`: Some(72), added: 2547, mode: `MaxEncodedLen`)
    /// Storage: `Staking::Validators` (r:1 w:0)
    /// Proof: `Staking::Validators` (`max_values`: None, `max_size`: Some(45), added: 2520, mode: `MaxEncodedLen`)
    /// Storage: `Staking::Nominators` (r:1 w:1)
    /// Proof: `Staking::Nominators` (`max_values`: None, `max_size`: Some(366), added: 2841, mode: `MaxEncodedLen`)
    /// Storage: `Staking::CounterForNominators` (r:1 w:1)
    /// Proof: `Staking::CounterForNominators` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
    /// Storage: `VoterList::ListNodes` (r:2 w:2)
    /// Proof: `VoterList::ListNodes` (`max_values`: None, `max_size`: Some(154), added: 2629, mode: `MaxEncodedLen`)
    /// Storage: `VoterList::ListBags` (r:1 w:1)
    /// Proof: `VoterList::ListBags` (`max_values`: None, `max_size`: Some(82), added: 2557, mode: `MaxEncodedLen`)
    /// Storage: `VoterList::CounterForListNodes` (r:1 w:1)
    /// Proof: `VoterList::CounterForListNodes` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
    fn chill() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1770`
        //  Estimated: `6248`
        // Minimum execution time: 63_087_000 picoseconds.
        Weight::from_parts(64_350_000, 6248)
            .saturating_add(T::DbWeight::get().reads(9_u64))
            .saturating_add(T::DbWeight::get().writes(6_u64))
    }
    /// Storage: `Staking::Ledger` (r:1 w:0)
    /// Proof: `Staking::Ledger` (`max_values`: None, `max_size`: Some(874), added: 3349, mode: `MaxEncodedLen`)
    /// Storage: `Staking::Bonded` (r:1 w:0)
    /// Proof: `Staking::Bonded` (`max_values`: None, `max_size`: Some(72), added: 2547, mode: `MaxEncodedLen`)
    /// Storage: `Staking::Payee` (r:0 w:1)
    /// Proof: `Staking::Payee` (`max_values`: None, `max_size`: Some(73), added: 2548, mode: `MaxEncodedLen`)
    fn set_payee() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `854`
        //  Estimated: `4339`
        // Minimum execution time: 24_285_000 picoseconds.
        Weight::from_parts(24_766_000, 4339)
            .saturating_add(T::DbWeight::get().reads(2_u64))
            .saturating_add(T::DbWeight::get().writes(1_u64))
    }
    /// Storage: `Staking::Ledger` (r:1 w:0)
    /// Proof: `Staking::Ledger` (`max_values`: None, `max_size`: Some(874), added: 3349, mode: `MaxEncodedLen`)
    /// Storage: `Staking::Bonded` (r:1 w:0)
    /// Proof: `Staking::Bonded` (`max_values`: None, `max_size`: Some(72), added: 2547, mode: `MaxEncodedLen`)
    /// Storage: `Staking::Payee` (r:1 w:1)
    /// Proof: `Staking::Payee` (`max_values`: None, `max_size`: Some(73), added: 2548, mode: `MaxEncodedLen`)
    fn update_payee() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `921`
        //  Estimated: `4339`
        // Minimum execution time: 28_083_000 picoseconds.
        Weight::from_parts(28_794_000, 4339)
            .saturating_add(T::DbWeight::get().reads(3_u64))
            .saturating_add(T::DbWeight::get().writes(1_u64))
    }
    /// Storage: `Staking::Bonded` (r:1 w:1)
    /// Proof: `Staking::Bonded` (`max_values`: None, `max_size`: Some(72), added: 2547, mode: `MaxEncodedLen`)
    /// Storage: `Staking::Ledger` (r:2 w:2)
    /// Proof: `Staking::Ledger` (`max_values`: None, `max_size`: Some(874), added: 3349, mode: `MaxEncodedLen`)
    fn set_controller() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `854`
        //  Estimated: `7688`
        // Minimum execution time: 26_830_000 picoseconds.
        Weight::from_parts(27_692_000, 7688)
            .saturating_add(T::DbWeight::get().reads(3_u64))
            .saturating_add(T::DbWeight::get().writes(3_u64))
    }
    /// Storage: `Staking::ValidatorCount` (r:0 w:1)
    /// Proof: `Staking::ValidatorCount` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
    fn set_validator_count() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_794_000 picoseconds.
        Weight::from_parts(1_943_000, 0)
            .saturating_add(T::DbWeight::get().writes(1_u64))
    }
    /// Storage: `Staking::ForceEra` (r:0 w:1)
    /// Proof: `Staking::ForceEra` (`max_values`: Some(1), `max_size`: Some(1), added: 496, mode: `MaxEncodedLen`)
    fn force_no_eras() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_721_000 picoseconds.
        Weight::from_parts(5_951_000, 0)
            .saturating_add(T::DbWeight::get().writes(1_u64))
    }
    /// Storage: `Staking::ForceEra` (r:0 w:1)
    /// Proof: `Staking::ForceEra` (`max_values`: Some(1), `max_size`: Some(1), added: 496, mode: `MaxEncodedLen`)
    fn force_new_era() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_571_000 picoseconds.
        Weight::from_parts(5_871_000, 0)
            .saturating_add(T::DbWeight::get().writes(1_u64))
    }
    /// Storage: `Staking::ForceEra` (r:0 w:1)
    /// Proof: `Staking::ForceEra` (`max_values`: Some(1), `max_size`: Some(1), added: 496, mode: `MaxEncodedLen`)
    fn force_new_era_always() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_791_000 picoseconds.
        Weight::from_parts(6_041_000, 0)
            .saturating_add(T::DbWeight::get().writes(1_u64))
    }
    /// Storage: `Staking::Invulnerables` (r:0 w:1)
    /// Proof: `Staking::Invulnerables` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    /// The range of component `v` is `[0, 1000]`.
    fn set_invulnerables(v: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_893_000 picoseconds.
        Weight::from_parts(1_729_096, 0)
            // Standard Error: 73
            .saturating_add(Weight::from_parts(11_873, 0).saturating_mul(v.into()))
            .saturating_add(T::DbWeight::get().writes(1_u64))
    }
    /// Storage: `Staking::Ledger` (r:2 w:2)
    /// Proof: `Staking::Ledger` (`max_values`: None, `max_size`: Some(874), added: 3349, mode: `MaxEncodedLen`)
    /// Storage: `Staking::Bonded` (r:1 w:1)
    /// Proof: `Staking::Bonded` (`max_values`: None, `max_size`: Some(72), added: 2547, mode: `MaxEncodedLen`)
    /// Storage: `Staking::Payee` (r:1 w:0)
    /// Proof: `Staking::Payee` (`max_values`: None, `max_size`: Some(73), added: 2548, mode: `MaxEncodedLen`)
    /// The range of component `u` is `[0, 1]`.
    fn deprecate_controller_batch(u: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0 + u * (921 ±0)`
        //  Estimated: `3844 + u * (3844 ±0)`
        // Minimum execution time: 3_446_000 picoseconds.
        Weight::from_parts(3_798_010, 3844)
            // Standard Error: 22_550
            .saturating_add(Weight::from_parts(31_719_389, 0).saturating_mul(u.into()))
            .saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(u.into())))
            .saturating_add(T::DbWeight::get().writes((3_u64).saturating_mul(u.into())))
            .saturating_add(Weight::from_parts(0, 3844).saturating_mul(u.into()))
    }
    /// Storage: `Staking::SlashingSpans` (r:1 w:1)
    /// Proof: `Staking::SlashingSpans` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `Staking::Bonded` (r:1 w:1)
    /// Proof: `Staking::Bonded` (`max_values`: None, `max_size`: Some(72), added: 2547, mode: `MaxEncodedLen`)
    /// Storage: `Staking::Ledger` (r:1 w:1)
    /// Proof: `Staking::Ledger` (`max_values`: None, `max_size`: Some(874), added: 3349, mode: `MaxEncodedLen`)
    /// Storage: `Staking::VirtualStakers` (r:1 w:1)
    /// Proof: `Staking::VirtualStakers` (`max_values`: None, `max_size`: Some(40), added: 2515, mode: `MaxEncodedLen`)
    /// Storage: `Balances::Locks` (r:1 w:1)
    /// Proof: `Balances::Locks` (`max_values`: None, `max_size`: Some(1299), added: 3774, mode: `MaxEncodedLen`)
    /// Storage: `Balances::Freezes` (r:1 w:0)
    /// Proof: `Balances::Freezes` (`max_values`: None, `max_size`: Some(185), added: 2660, mode: `MaxEncodedLen`)
    /// Storage: `System::Account` (r:1 w:1)
    /// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
    /// Storage: `Staking::Validators` (r:1 w:0)
    /// Proof: `Staking::Validators` (`max_values`: None, `max_size`: Some(45), added: 2520, mode: `MaxEncodedLen`)
    /// Storage: `Staking::Nominators` (r:1 w:1)
    /// Proof: `Staking::Nominators` (`max_values`: None, `max_size`: Some(366), added: 2841, mode: `MaxEncodedLen`)
    /// Storage: `Staking::CounterForNominators` (r:1 w:1)
    /// Proof: `Staking::CounterForNominators` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
    /// Storage: `VoterList::ListNodes` (r:2 w:2)
    /// Proof: `VoterList::ListNodes` (`max_values`: None, `max_size`: Some(154), added: 2629, mode: `MaxEncodedLen`)
    /// Storage: `VoterList::ListBags` (r:1 w:1)
    /// Proof: `VoterList::ListBags` (`max_values`: None, `max_size`: Some(82), added: 2557, mode: `MaxEncodedLen`)
    /// Storage: `VoterList::CounterForListNodes` (r:1 w:1)
    /// Proof: `VoterList::CounterForListNodes` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
    /// Storage: `Staking::Payee` (r:0 w:1)
    /// Proof: `Staking::Payee` (`max_values`: None, `max_size`: Some(73), added: 2548, mode: `MaxEncodedLen`)
    /// Storage: `Staking::SpanSlash` (r:0 w:100)
    /// Proof: `Staking::SpanSlash` (`max_values`: None, `max_size`: Some(76), added: 2551, mode: `MaxEncodedLen`)
    /// The range of component `s` is `[0, 100]`.
    fn force_unstake(s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `2117 + s * (4 ±0)`
        //  Estimated: `6248 + s * (4 ±0)`
        // Minimum execution time: 97_021_000 picoseconds.
        Weight::from_parts(101_728_366, 6248)
            // Standard Error: 2_618
            .saturating_add(Weight::from_parts(1_295_411, 0).saturating_mul(s.into()))
            .saturating_add(T::DbWeight::get().reads(14_u64))
            .saturating_add(T::DbWeight::get().writes(13_u64))
            .saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(s.into())))
            .saturating_add(Weight::from_parts(0, 4).saturating_mul(s.into()))
    }
    /// Storage: `Staking::UnappliedSlashes` (r:1 w:1)
    /// Proof: `Staking::UnappliedSlashes` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// The range of component `s` is `[1, 1000]`.
    fn cancel_deferred_slash(s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `66626`
        //  Estimated: `70091`
        // Minimum execution time: 125_354_000 picoseconds.
        Weight::from_parts(928_752_717, 70091)
            // Standard Error: 57_933
            .saturating_add(Weight::from_parts(4_827_420, 0).saturating_mul(s.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
            .saturating_add(T::DbWeight::get().writes(1_u64))
    }
    /// Storage: `Staking::Bonded` (r:65 w:0)
    /// Proof: `Staking::Bonded` (`max_values`: None, `max_size`: Some(72), added: 2547, mode: `MaxEncodedLen`)
    /// Storage: `Staking::Ledger` (r:65 w:65)
    /// Proof: `Staking::Ledger` (`max_values`: None, `max_size`: Some(874), added: 3349, mode: `MaxEncodedLen`)
    /// Storage: `Staking::ErasStakersClipped` (r:1 w:0)
    /// Proof: `Staking::ErasStakersClipped` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `Staking::ErasStakersOverview` (r:1 w:0)
    /// Proof: `Staking::ErasStakersOverview` (`max_values`: None, `max_size`: Some(92), added: 2567, mode: `MaxEncodedLen`)
    /// Storage: `Staking::ClaimedRewards` (r:1 w:1)
    /// Proof: `Staking::ClaimedRewards` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `Staking::CurrentEra` (r:1 w:0)
    /// Proof: `Staking::CurrentEra` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
    /// Storage: `Staking::ErasValidatorReward` (r:1 w:0)
    /// Proof: `Staking::ErasValidatorReward` (`max_values`: None, `max_size`: Some(28), added: 2503, mode: `MaxEncodedLen`)
    /// Storage: `System::Account` (r:65 w:65)
    /// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
    /// Storage: `Staking::VirtualStakers` (r:65 w:0)
    /// Proof: `Staking::VirtualStakers` (`max_values`: None, `max_size`: Some(40), added: 2515, mode: `MaxEncodedLen`)
    /// Storage: `Balances::Locks` (r:65 w:65)
    /// Proof: `Balances::Locks` (`max_values`: None, `max_size`: Some(1299), added: 3774, mode: `MaxEncodedLen`)
    /// Storage: `Balances::Freezes` (r:65 w:0)
    /// Proof: `Balances::Freezes` (`max_values`: None, `max_size`: Some(185), added: 2660, mode: `MaxEncodedLen`)
    /// Storage: `Staking::ErasStakersPaged` (r:1 w:0)
    /// Proof: `Staking::ErasStakersPaged` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `Staking::ErasRewardPoints` (r:1 w:0)
    /// Proof: `Staking::ErasRewardPoints` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `Staking::ErasValidatorPrefs` (r:1 w:0)
    /// Proof: `Staking::ErasValidatorPrefs` (`max_values`: None, `max_size`: Some(57), added: 2532, mode: `MaxEncodedLen`)
    /// Storage: `Staking::Payee` (r:65 w:0)
    /// Proof: `Staking::Payee` (`max_values`: None, `max_size`: Some(73), added: 2548, mode: `MaxEncodedLen`)
    /// The range of component `n` is `[0, 64]`.
    fn payout_stakers_alive_staked(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `8141 + n * (399 ±0)`
        //  Estimated: `10710 + n * (3774 ±3)`
        // Minimum execution time: 160_970_000 picoseconds.
        Weight::from_parts(198_939_037, 10710)
            // Standard Error: 41_274
            .saturating_add(Weight::from_parts(49_088_893, 0).saturating_mul(n.into()))
            .saturating_add(T::DbWeight::get().reads(15_u64))
            .saturating_add(T::DbWeight::get().reads((7_u64).saturating_mul(n.into())))
            .saturating_add(T::DbWeight::get().writes(4_u64))
            .saturating_add(T::DbWeight::get().writes((3_u64).saturating_mul(n.into())))
            .saturating_add(Weight::from_parts(0, 3774).saturating_mul(n.into()))
    }
    /// Storage: `Staking::Ledger` (r:1 w:1)
    /// Proof: `Staking::Ledger` (`max_values`: None, `max_size`: Some(874), added: 3349, mode: `MaxEncodedLen`)
    /// Storage: `Staking::Bonded` (r:1 w:0)
    /// Proof: `Staking::Bonded` (`max_values`: None, `max_size`: Some(72), added: 2547, mode: `MaxEncodedLen`)
    /// Storage: `Staking::VirtualStakers` (r:1 w:0)
    /// Proof: `Staking::VirtualStakers` (`max_values`: None, `max_size`: Some(40), added: 2515, mode: `MaxEncodedLen`)
    /// Storage: `Balances::Locks` (r:1 w:1)
    /// Proof: `Balances::Locks` (`max_values`: None, `max_size`: Some(1299), added: 3774, mode: `MaxEncodedLen`)
    /// Storage: `Balances::Freezes` (r:1 w:0)
    /// Proof: `Balances::Freezes` (`max_values`: None, `max_size`: Some(185), added: 2660, mode: `MaxEncodedLen`)
    /// Storage: `VoterList::ListNodes` (r:3 w:3)
    /// Proof: `VoterList::ListNodes` (`max_values`: None, `max_size`: Some(154), added: 2629, mode: `MaxEncodedLen`)
    /// Storage: `VoterList::ListBags` (r:2 w:2)
    /// Proof: `VoterList::ListBags` (`max_values`: None, `max_size`: Some(82), added: 2557, mode: `MaxEncodedLen`)
    /// The range of component `l` is `[1, 32]`.
    fn rebond(l: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1912 + l * (7 ±0)`
        //  Estimated: `8877`
        // Minimum execution time: 92_633_000 picoseconds.
        Weight::from_parts(94_919_799, 8877)
            // Standard Error: 2_289
            .saturating_add(Weight::from_parts(47_497, 0).saturating_mul(l.into()))
            .saturating_add(T::DbWeight::get().reads(10_u64))
            .saturating_add(T::DbWeight::get().writes(7_u64))
    }
    /// Storage: `Staking::VirtualStakers` (r:1 w:1)
    /// Proof: `Staking::VirtualStakers` (`max_values`: None, `max_size`: Some(40), added: 2515, mode: `MaxEncodedLen`)
    /// Storage: `Staking::Bonded` (r:1 w:1)
    /// Proof: `Staking::Bonded` (`max_values`: None, `max_size`: Some(72), added: 2547, mode: `MaxEncodedLen`)
    /// Storage: `Staking::Ledger` (r:1 w:1)
    /// Proof: `Staking::Ledger` (`max_values`: None, `max_size`: Some(874), added: 3349, mode: `MaxEncodedLen`)
    /// Storage: `Staking::SlashingSpans` (r:1 w:1)
    /// Proof: `Staking::SlashingSpans` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `Balances::Locks` (r:1 w:1)
    /// Proof: `Balances::Locks` (`max_values`: None, `max_size`: Some(1299), added: 3774, mode: `MaxEncodedLen`)
    /// Storage: `Balances::Freezes` (r:1 w:0)
    /// Proof: `Balances::Freezes` (`max_values`: None, `max_size`: Some(185), added: 2660, mode: `MaxEncodedLen`)
    /// Storage: `Staking::Validators` (r:1 w:0)
    /// Proof: `Staking::Validators` (`max_values`: None, `max_size`: Some(45), added: 2520, mode: `MaxEncodedLen`)
    /// Storage: `Staking::Nominators` (r:1 w:1)
    /// Proof: `Staking::Nominators` (`max_values`: None, `max_size`: Some(366), added: 2841, mode: `MaxEncodedLen`)
    /// Storage: `Staking::CounterForNominators` (r:1 w:1)
    /// Proof: `Staking::CounterForNominators` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
    /// Storage: `VoterList::ListNodes` (r:2 w:2)
    /// Proof: `VoterList::ListNodes` (`max_values`: None, `max_size`: Some(154), added: 2629, mode: `MaxEncodedLen`)
    /// Storage: `VoterList::ListBags` (r:1 w:1)
    /// Proof: `VoterList::ListBags` (`max_values`: None, `max_size`: Some(82), added: 2557, mode: `MaxEncodedLen`)
    /// Storage: `VoterList::CounterForListNodes` (r:1 w:1)
    /// Proof: `VoterList::CounterForListNodes` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
    /// Storage: `Staking::Payee` (r:0 w:1)
    /// Proof: `Staking::Payee` (`max_values`: None, `max_size`: Some(73), added: 2548, mode: `MaxEncodedLen`)
    /// Storage: `Staking::SpanSlash` (r:0 w:100)
    /// Proof: `Staking::SpanSlash` (`max_values`: None, `max_size`: Some(76), added: 2551, mode: `MaxEncodedLen`)
    /// The range of component `s` is `[1, 100]`.
    fn reap_stash(s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `2117 + s * (4 ±0)`
        //  Estimated: `6248 + s * (4 ±0)`
        // Minimum execution time: 108_963_000 picoseconds.
        Weight::from_parts(110_018_543, 6248)
            // Standard Error: 2_357
            .saturating_add(Weight::from_parts(1_293_816, 0).saturating_mul(s.into()))
            .saturating_add(T::DbWeight::get().reads(13_u64))
            .saturating_add(T::DbWeight::get().writes(12_u64))
            .saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(s.into())))
            .saturating_add(Weight::from_parts(0, 4).saturating_mul(s.into()))
    }
    /// Storage: `VoterList::CounterForListNodes` (r:1 w:0)
    /// Proof: `VoterList::CounterForListNodes` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
    /// Storage: `VoterList::ListBags` (r:155 w:0)
    /// Proof: `VoterList::ListBags` (`max_values`: None, `max_size`: Some(82), added: 2557, mode: `MaxEncodedLen`)
    /// Storage: `VoterList::ListNodes` (r:110 w:0)
    /// Proof: `VoterList::ListNodes` (`max_values`: None, `max_size`: Some(154), added: 2629, mode: `MaxEncodedLen`)
    /// Storage: `Staking::Bonded` (r:110 w:0)
    /// Proof: `Staking::Bonded` (`max_values`: None, `max_size`: Some(72), added: 2547, mode: `MaxEncodedLen`)
    /// Storage: `Staking::Ledger` (r:110 w:0)
    /// Proof: `Staking::Ledger` (`max_values`: None, `max_size`: Some(874), added: 3349, mode: `MaxEncodedLen`)
    /// Storage: `Staking::Nominators` (r:110 w:0)
    /// Proof: `Staking::Nominators` (`max_values`: None, `max_size`: Some(366), added: 2841, mode: `MaxEncodedLen`)
    /// Storage: `Staking::Validators` (r:11 w:0)
    /// Proof: `Staking::Validators` (`max_values`: None, `max_size`: Some(45), added: 2520, mode: `MaxEncodedLen`)
    /// Storage: `Staking::CounterForValidators` (r:1 w:0)
    /// Proof: `Staking::CounterForValidators` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
    /// Storage: `Staking::ValidatorCount` (r:1 w:0)
    /// Proof: `Staking::ValidatorCount` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
    /// Storage: `Staking::MinimumValidatorCount` (r:1 w:0)
    /// Proof: `Staking::MinimumValidatorCount` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
    /// Storage: `Staking::CurrentEra` (r:1 w:1)
    /// Proof: `Staking::CurrentEra` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
    /// Storage: `Staking::ErasValidatorPrefs` (r:0 w:10)
    /// Proof: `Staking::ErasValidatorPrefs` (`max_values`: None, `max_size`: Some(57), added: 2532, mode: `MaxEncodedLen`)
    /// Storage: `Staking::ErasStakersPaged` (r:0 w:20)
    /// Proof: `Staking::ErasStakersPaged` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `Staking::ErasStakersOverview` (r:0 w:10)
    /// Proof: `Staking::ErasStakersOverview` (`max_values`: None, `max_size`: Some(92), added: 2567, mode: `MaxEncodedLen`)
    /// Storage: `Staking::ErasTotalStake` (r:0 w:1)
    /// Proof: `Staking::ErasTotalStake` (`max_values`: None, `max_size`: Some(28), added: 2503, mode: `MaxEncodedLen`)
    /// Storage: `Staking::ErasStartSessionIndex` (r:0 w:1)
    /// Proof: `Staking::ErasStartSessionIndex` (`max_values`: None, `max_size`: Some(16), added: 2491, mode: `MaxEncodedLen`)
    /// Storage: `Staking::MinimumActiveStake` (r:0 w:1)
    /// Proof: `Staking::MinimumActiveStake` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
    /// The range of component `v` is `[1, 10]`.
    /// The range of component `n` is `[0, 100]`.
    fn new_era(v: u32, n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0 + n * (718 ±0) + v * (3596 ±0)`
        //  Estimated: `397325 + n * (3349 ±0) + v * (3349 ±0)`
        // Minimum execution time: 576_715_000 picoseconds.
        Weight::from_parts(586_243_000, 397325)
            // Standard Error: 2_277_720
            .saturating_add(Weight::from_parts(68_554_996, 0).saturating_mul(v.into()))
            // Standard Error: 226_962
            .saturating_add(Weight::from_parts(21_317_501, 0).saturating_mul(n.into()))
            .saturating_add(T::DbWeight::get().reads(161_u64))
            .saturating_add(T::DbWeight::get().reads((5_u64).saturating_mul(v.into())))
            .saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(n.into())))
            .saturating_add(T::DbWeight::get().writes(8_u64))
            .saturating_add(T::DbWeight::get().writes((3_u64).saturating_mul(v.into())))
            .saturating_add(Weight::from_parts(0, 3349).saturating_mul(n.into()))
            .saturating_add(Weight::from_parts(0, 3349).saturating_mul(v.into()))
    }
    /// Storage: `VoterList::CounterForListNodes` (r:1 w:0)
    /// Proof: `VoterList::CounterForListNodes` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
    /// Storage: `VoterList::ListBags` (r:155 w:0)
    /// Proof: `VoterList::ListBags` (`max_values`: None, `max_size`: Some(82), added: 2557, mode: `MaxEncodedLen`)
    /// Storage: `VoterList::ListNodes` (r:6000 w:0)
    /// Proof: `VoterList::ListNodes` (`max_values`: None, `max_size`: Some(154), added: 2629, mode: `MaxEncodedLen`)
    /// Storage: `Staking::Bonded` (r:6000 w:0)
    /// Proof: `Staking::Bonded` (`max_values`: None, `max_size`: Some(72), added: 2547, mode: `MaxEncodedLen`)
    /// Storage: `Staking::Ledger` (r:6000 w:0)
    /// Proof: `Staking::Ledger` (`max_values`: None, `max_size`: Some(874), added: 3349, mode: `MaxEncodedLen`)
    /// Storage: `Staking::Nominators` (r:6000 w:0)
    /// Proof: `Staking::Nominators` (`max_values`: None, `max_size`: Some(366), added: 2841, mode: `MaxEncodedLen`)
    /// Storage: `Staking::Validators` (r:1000 w:0)
    /// Proof: `Staking::Validators` (`max_values`: None, `max_size`: Some(45), added: 2520, mode: `MaxEncodedLen`)
    /// Storage: `Staking::MinimumActiveStake` (r:0 w:1)
    /// Proof: `Staking::MinimumActiveStake` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
    /// The range of component `v` is `[500, 1000]`.
    /// The range of component `n` is `[2500, 5000]`.
    fn get_npos_voters(v: u32, n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `2361 + n * (717 ±0) + v * (393 ±0)`
        //  Estimated: `397325 + n * (3349 ±0) + v * (3349 ±0)`
        // Minimum execution time: 100_341_861_000 picoseconds.
        Weight::from_parts(100_839_860_000, 397325)
            // Standard Error: 228_021
            .saturating_add(Weight::from_parts(20_752_229, 0).saturating_mul(n.into()))
            .saturating_add(T::DbWeight::get().reads(156_u64))
            .saturating_add(T::DbWeight::get().reads((5_u64).saturating_mul(v.into())))
            .saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(n.into())))
            .saturating_add(T::DbWeight::get().writes(1_u64))
            .saturating_add(Weight::from_parts(0, 3349).saturating_mul(n.into()))
            .saturating_add(Weight::from_parts(0, 3349).saturating_mul(v.into()))
    }
    /// Storage: `Staking::CounterForValidators` (r:1 w:0)
    /// Proof: `Staking::CounterForValidators` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
    /// Storage: `Staking::Validators` (r:1001 w:0)
    /// Proof: `Staking::Validators` (`max_values`: None, `max_size`: Some(45), added: 2520, mode: `MaxEncodedLen`)
    /// The range of component `v` is `[500, 1000]`.
    fn get_npos_targets(v: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `933 + v * (50 ±0)`
        //  Estimated: `3510 + v * (2520 ±0)`
        // Minimum execution time: 2_894_660_000 picoseconds.
        Weight::from_parts(145_380_110, 3510)
            // Standard Error: 10_715
            .saturating_add(Weight::from_parts(5_605_366, 0).saturating_mul(v.into()))
            .saturating_add(T::DbWeight::get().reads(2_u64))
            .saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(v.into())))
            .saturating_add(Weight::from_parts(0, 2520).saturating_mul(v.into()))
    }
    /// Storage: `Staking::MinCommission` (r:0 w:1)
    /// Proof: `Staking::MinCommission` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
    /// Storage: `Staking::MinValidatorBond` (r:0 w:1)
    /// Proof: `Staking::MinValidatorBond` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
    /// Storage: `Staking::MaxValidatorsCount` (r:0 w:1)
    /// Proof: `Staking::MaxValidatorsCount` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
    /// Storage: `Staking::MaxStakedRewards` (r:0 w:1)
    /// Proof: `Staking::MaxStakedRewards` (`max_values`: Some(1), `max_size`: Some(1), added: 496, mode: `MaxEncodedLen`)
    /// Storage: `Staking::ChillThreshold` (r:0 w:1)
    /// Proof: `Staking::ChillThreshold` (`max_values`: Some(1), `max_size`: Some(1), added: 496, mode: `MaxEncodedLen`)
    /// Storage: `Staking::MaxNominatorsCount` (r:0 w:1)
    /// Proof: `Staking::MaxNominatorsCount` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
    /// Storage: `Staking::MinNominatorBond` (r:0 w:1)
    /// Proof: `Staking::MinNominatorBond` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
    fn set_staking_configs_all_set() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_256_000 picoseconds.
        Weight::from_parts(3_386_000, 0)
            .saturating_add(T::DbWeight::get().writes(7_u64))
    }
    /// Storage: `Staking::MinCommission` (r:0 w:1)
    /// Proof: `Staking::MinCommission` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
    /// Storage: `Staking::MinValidatorBond` (r:0 w:1)
    /// Proof: `Staking::MinValidatorBond` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
    /// Storage: `Staking::MaxValidatorsCount` (r:0 w:1)
    /// Proof: `Staking::MaxValidatorsCount` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
    /// Storage: `Staking::MaxStakedRewards` (r:0 w:1)
    /// Proof: `Staking::MaxStakedRewards` (`max_values`: Some(1), `max_size`: Some(1), added: 496, mode: `MaxEncodedLen`)
    /// Storage: `Staking::ChillThreshold` (r:0 w:1)
    /// Proof: `Staking::ChillThreshold` (`max_values`: Some(1), `max_size`: Some(1), added: 496, mode: `MaxEncodedLen`)
    /// Storage: `Staking::MaxNominatorsCount` (r:0 w:1)
    /// Proof: `Staking::MaxNominatorsCount` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
    /// Storage: `Staking::MinNominatorBond` (r:0 w:1)
    /// Proof: `Staking::MinNominatorBond` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
    fn set_staking_configs_all_remove() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_896_000 picoseconds.
        Weight::from_parts(3_116_000, 0)
            .saturating_add(T::DbWeight::get().writes(7_u64))
    }
    /// Storage: `Staking::Bonded` (r:1 w:0)
    /// Proof: `Staking::Bonded` (`max_values`: None, `max_size`: Some(72), added: 2547, mode: `MaxEncodedLen`)
    /// Storage: `Staking::Ledger` (r:1 w:0)
    /// Proof: `Staking::Ledger` (`max_values`: None, `max_size`: Some(874), added: 3349, mode: `MaxEncodedLen`)
    /// Storage: `Staking::Nominators` (r:1 w:1)
    /// Proof: `Staking::Nominators` (`max_values`: None, `max_size`: Some(366), added: 2841, mode: `MaxEncodedLen`)
    /// Storage: `Staking::ChillThreshold` (r:1 w:0)
    /// Proof: `Staking::ChillThreshold` (`max_values`: Some(1), `max_size`: Some(1), added: 496, mode: `MaxEncodedLen`)
    /// Storage: `Staking::MaxNominatorsCount` (r:1 w:0)
    /// Proof: `Staking::MaxNominatorsCount` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
    /// Storage: `Staking::CounterForNominators` (r:1 w:1)
    /// Proof: `Staking::CounterForNominators` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
    /// Storage: `Staking::MinNominatorBond` (r:1 w:0)
    /// Proof: `Staking::MinNominatorBond` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
    /// Storage: `Staking::Validators` (r:1 w:0)
    /// Proof: `Staking::Validators` (`max_values`: None, `max_size`: Some(45), added: 2520, mode: `MaxEncodedLen`)
    /// Storage: `VoterList::ListNodes` (r:2 w:2)
    /// Proof: `VoterList::ListNodes` (`max_values`: None, `max_size`: Some(154), added: 2629, mode: `MaxEncodedLen`)
    /// Storage: `VoterList::ListBags` (r:1 w:1)
    /// Proof: `VoterList::ListBags` (`max_values`: None, `max_size`: Some(82), added: 2557, mode: `MaxEncodedLen`)
    /// Storage: `VoterList::CounterForListNodes` (r:1 w:1)
    /// Proof: `VoterList::CounterForListNodes` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
    fn chill_other() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1906`
        //  Estimated: `6248`
        // Minimum execution time: 76_755_000 picoseconds.
        Weight::from_parts(78_538_000, 6248)
            .saturating_add(T::DbWeight::get().reads(12_u64))
            .saturating_add(T::DbWeight::get().writes(6_u64))
    }
    /// Storage: `Staking::MinCommission` (r:1 w:0)
    /// Proof: `Staking::MinCommission` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
    /// Storage: `Staking::Validators` (r:1 w:1)
    /// Proof: `Staking::Validators` (`max_values`: None, `max_size`: Some(45), added: 2520, mode: `MaxEncodedLen`)
    fn force_apply_min_commission() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `644`
        //  Estimated: `3510`
        // Minimum execution time: 15_910_000 picoseconds.
        Weight::from_parts(16_190_000, 3510)
            .saturating_add(T::DbWeight::get().reads(2_u64))
            .saturating_add(T::DbWeight::get().writes(1_u64))
    }
    /// Storage: `Staking::MinCommission` (r:0 w:1)
    /// Proof: `Staking::MinCommission` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
    fn set_min_commission() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_843_000 picoseconds.
        Weight::from_parts(1_914_000, 0)
            .saturating_add(T::DbWeight::get().writes(1_u64))
    }
    /// Storage: `System::Account` (r:1 w:1)
    /// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
    /// Storage: `Staking::VirtualStakers` (r:1 w:0)
    /// Proof: `Staking::VirtualStakers` (`max_values`: None, `max_size`: Some(40), added: 2515, mode: `MaxEncodedLen`)
    /// Storage: `Balances::Locks` (r:1 w:1)
    /// Proof: `Balances::Locks` (`max_values`: None, `max_size`: Some(1299), added: 3774, mode: `MaxEncodedLen`)
    /// Storage: `Staking::Bonded` (r:1 w:1)
    /// Proof: `Staking::Bonded` (`max_values`: None, `max_size`: Some(72), added: 2547, mode: `MaxEncodedLen`)
    /// Storage: `Staking::Ledger` (r:1 w:1)
    /// Proof: `Staking::Ledger` (`max_values`: None, `max_size`: Some(874), added: 3349, mode: `MaxEncodedLen`)
    /// Storage: `Balances::Freezes` (r:1 w:0)
    /// Proof: `Balances::Freezes` (`max_values`: None, `max_size`: Some(185), added: 2660, mode: `MaxEncodedLen`)
    fn restore_ledger() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1001`
        //  Estimated: `4764`
        // Minimum execution time: 53_040_000 picoseconds.
        Weight::from_parts(53_702_000, 4764)
            .saturating_add(T::DbWeight::get().reads(6_u64))
            .saturating_add(T::DbWeight::get().writes(4_u64))
    }
}
