// Copyright 2024, Horizen Labs, Inc.
// SPDX-License-Identifier: Apache-2.0

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// 	http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//! Autogenerated weights for `xcm::pallet_xcm_benchmarks_generic`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 43.0.0
//! DATE: 2025-03-01, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `0ae3fbb14948`, CPU: `AMD Ryzen 7 7700 8-Core Processor`
//! WASM-EXECUTION: `Compiled`, CHAIN: `Some("dev")`, DB CACHE: `1024`

// Executed Command:
// /usr/local/bin/zkv-relay
// benchmark
// pallet
// --chain
// dev
// --pallet
// xcm::pallet-xcm-benchmarks-generic
// --extrinsic
// *
// --steps
// 50
// --repeat
// 20
// --heap-pages=4096
// --header
// /data/benchmark/HEADER-APACHE2
// --output
// /data/benchmark/runtime/src/weights/xcm/pallet_xcm_benchmarks_generic.rs
// --template
// /data/benchmark/relay-node/benchmarks/zkv-deploy-weight-template-xcm.hbs
// --base-path=/tmp/tmp.1rbLszjw13

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use core::marker::PhantomData;

/// Weights for `xcm::pallet_xcm_benchmarks_generic` using the zkVerify node and recommended hardware.
pub struct WeightInfo<T>(PhantomData<T>);

impl<T: frame_system::Config> WeightInfo<T> {
    /// Storage: `Dmp::DeliveryFeeFactor` (r:1 w:0)
    /// Proof: `Dmp::DeliveryFeeFactor` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `XcmPallet::SupportedVersion` (r:1 w:0)
    /// Proof: `XcmPallet::SupportedVersion` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `Dmp::DownwardMessageQueues` (r:1 w:1)
    /// Proof: `Dmp::DownwardMessageQueues` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `System::Account` (r:2 w:2)
    /// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
    /// Storage: `Dmp::DownwardMessageQueueHeads` (r:1 w:1)
    /// Proof: `Dmp::DownwardMessageQueueHeads` (`max_values`: None, `max_size`: None, mode: `Measured`)
    pub(crate) fn report_holding() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `246`
        //  Estimated: `6196`
        // Minimum execution time: 64_341_000 picoseconds.
        Weight::from_parts(65_744_000, 6196)
            .saturating_add(T::DbWeight::get().reads(6_u64))
            .saturating_add(T::DbWeight::get().writes(4_u64))
    }
    pub(crate) fn buy_execution() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 571_000 picoseconds.
        Weight::from_parts(652_000, 0)
    }
    /// Storage: `XcmPallet::Queries` (r:1 w:0)
    /// Proof: `XcmPallet::Queries` (`max_values`: None, `max_size`: None, mode: `Measured`)
    pub(crate) fn query_response() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `3465`
        // Minimum execution time: 4_839_000 picoseconds.
        Weight::from_parts(5_120_000, 3465)
            .saturating_add(T::DbWeight::get().reads(1_u64))
    }
    pub(crate) fn transact() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_240_000 picoseconds.
        Weight::from_parts(5_481_000, 0)
    }
    pub(crate) fn refund_surplus() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_072_000 picoseconds.
        Weight::from_parts(1_183_000, 0)
    }
    pub(crate) fn set_error_handler() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 612_000 picoseconds.
        Weight::from_parts(681_000, 0)
    }
    pub(crate) fn set_appendix() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 611_000 picoseconds.
        Weight::from_parts(682_000, 0)
    }
    pub(crate) fn clear_error() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 571_000 picoseconds.
        Weight::from_parts(631_000, 0)
    }
    pub(crate) fn descend_origin() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 571_000 picoseconds.
        Weight::from_parts(641_000, 0)
    }
    pub(crate) fn clear_origin() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 541_000 picoseconds.
        Weight::from_parts(641_000, 0)
    }
    /// Storage: `Dmp::DeliveryFeeFactor` (r:1 w:0)
    /// Proof: `Dmp::DeliveryFeeFactor` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `XcmPallet::SupportedVersion` (r:1 w:0)
    /// Proof: `XcmPallet::SupportedVersion` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `Dmp::DownwardMessageQueues` (r:1 w:1)
    /// Proof: `Dmp::DownwardMessageQueues` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `System::Account` (r:2 w:2)
    /// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
    /// Storage: `Dmp::DownwardMessageQueueHeads` (r:1 w:1)
    /// Proof: `Dmp::DownwardMessageQueueHeads` (`max_values`: None, `max_size`: None, mode: `Measured`)
    pub(crate) fn report_error() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `246`
        //  Estimated: `6196`
        // Minimum execution time: 62_187_000 picoseconds.
        Weight::from_parts(63_550_000, 6196)
            .saturating_add(T::DbWeight::get().reads(6_u64))
            .saturating_add(T::DbWeight::get().writes(4_u64))
    }
    /// Storage: `XcmPallet::AssetTraps` (r:1 w:1)
    /// Proof: `XcmPallet::AssetTraps` (`max_values`: None, `max_size`: None, mode: `Measured`)
    pub(crate) fn claim_asset() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `23`
        //  Estimated: `3488`
        // Minimum execution time: 8_076_000 picoseconds.
        Weight::from_parts(8_396_000, 3488)
            .saturating_add(T::DbWeight::get().reads(1_u64))
            .saturating_add(T::DbWeight::get().writes(1_u64))
    }
    pub(crate) fn trap() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 561_000 picoseconds.
        Weight::from_parts(612_000, 0)
    }
    /// Storage: `XcmPallet::VersionNotifyTargets` (r:1 w:1)
    /// Proof: `XcmPallet::VersionNotifyTargets` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `Dmp::DeliveryFeeFactor` (r:1 w:0)
    /// Proof: `Dmp::DeliveryFeeFactor` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `XcmPallet::SupportedVersion` (r:1 w:0)
    /// Proof: `XcmPallet::SupportedVersion` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `Dmp::DownwardMessageQueues` (r:1 w:1)
    /// Proof: `Dmp::DownwardMessageQueues` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `Dmp::DownwardMessageQueueHeads` (r:1 w:1)
    /// Proof: `Dmp::DownwardMessageQueueHeads` (`max_values`: None, `max_size`: None, mode: `Measured`)
    pub(crate) fn subscribe_version() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `42`
        //  Estimated: `3507`
        // Minimum execution time: 25_839_000 picoseconds.
        Weight::from_parts(26_590_000, 3507)
            .saturating_add(T::DbWeight::get().reads(5_u64))
            .saturating_add(T::DbWeight::get().writes(3_u64))
    }
    /// Storage: `XcmPallet::VersionNotifyTargets` (r:0 w:1)
    /// Proof: `XcmPallet::VersionNotifyTargets` (`max_values`: None, `max_size`: None, mode: `Measured`)
    pub(crate) fn unsubscribe_version() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_655_000 picoseconds.
        Weight::from_parts(2_775_000, 0)
            .saturating_add(T::DbWeight::get().writes(1_u64))
    }
    pub(crate) fn burn_asset() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 932_000 picoseconds.
        Weight::from_parts(992_000, 0)
    }
    pub(crate) fn expect_asset() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 651_000 picoseconds.
        Weight::from_parts(712_000, 0)
    }
    pub(crate) fn expect_origin() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 561_000 picoseconds.
        Weight::from_parts(612_000, 0)
    }
    pub(crate) fn expect_error() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 601_000 picoseconds.
        Weight::from_parts(661_000, 0)
    }
    pub(crate) fn expect_transact_status() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 682_000 picoseconds.
        Weight::from_parts(792_000, 0)
    }
    /// Storage: `Dmp::DeliveryFeeFactor` (r:1 w:0)
    /// Proof: `Dmp::DeliveryFeeFactor` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `XcmPallet::SupportedVersion` (r:1 w:0)
    /// Proof: `XcmPallet::SupportedVersion` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `Dmp::DownwardMessageQueues` (r:1 w:1)
    /// Proof: `Dmp::DownwardMessageQueues` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `System::Account` (r:2 w:2)
    /// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
    /// Storage: `Dmp::DownwardMessageQueueHeads` (r:1 w:1)
    /// Proof: `Dmp::DownwardMessageQueueHeads` (`max_values`: None, `max_size`: None, mode: `Measured`)
    pub(crate) fn query_pallet() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `246`
        //  Estimated: `6196`
        // Minimum execution time: 69_921_000 picoseconds.
        Weight::from_parts(71_574_000, 6196)
            .saturating_add(T::DbWeight::get().reads(6_u64))
            .saturating_add(T::DbWeight::get().writes(4_u64))
    }
    pub(crate) fn expect_pallet() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 7_865_000 picoseconds.
        Weight::from_parts(8_105_000, 0)
    }
    /// Storage: `Dmp::DeliveryFeeFactor` (r:1 w:0)
    /// Proof: `Dmp::DeliveryFeeFactor` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `XcmPallet::SupportedVersion` (r:1 w:0)
    /// Proof: `XcmPallet::SupportedVersion` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `Dmp::DownwardMessageQueues` (r:1 w:1)
    /// Proof: `Dmp::DownwardMessageQueues` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `System::Account` (r:2 w:2)
    /// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
    /// Storage: `Dmp::DownwardMessageQueueHeads` (r:1 w:1)
    /// Proof: `Dmp::DownwardMessageQueueHeads` (`max_values`: None, `max_size`: None, mode: `Measured`)
    pub(crate) fn report_transact_status() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `246`
        //  Estimated: `6196`
        // Minimum execution time: 62_237_000 picoseconds.
        Weight::from_parts(63_689_000, 6196)
            .saturating_add(T::DbWeight::get().reads(6_u64))
            .saturating_add(T::DbWeight::get().writes(4_u64))
    }
    pub(crate) fn clear_transact_status() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 611_000 picoseconds.
        Weight::from_parts(681_000, 0)
    }
    pub(crate) fn set_topic() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 551_000 picoseconds.
        Weight::from_parts(641_000, 0)
    }
    pub(crate) fn clear_topic() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 561_000 picoseconds.
        Weight::from_parts(631_000, 0)
    }
    pub(crate) fn set_fees_mode() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 551_000 picoseconds.
        Weight::from_parts(611_000, 0)
    }
    pub(crate) fn unpaid_execution() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 581_000 picoseconds.
        Weight::from_parts(642_000, 0)
    }
}
